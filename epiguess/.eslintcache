[{"C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\index.js":"1","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\App.js":"2","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\serviceWorker.js":"3","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpObject.js":"4","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpEyeColor.js":"5","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\EmotionObject.js":"6","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpPupilOrientation.js":"7","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpChoosePicture.js":"8","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpMain.js":"9","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpObjectData.js":"10","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpTakePicture.js":"11","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpPupilSize.js":"12","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\Result.js":"13","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpPreGameInstruction.js":"14","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\PrevResult.js":"15","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpSelectApproach.js":"16","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\progress-bar.component.js":"17"},{"size":635,"mtime":1605204979458,"results":"18","hashOfConfig":"19"},{"size":10950,"mtime":1607529228793,"results":"20","hashOfConfig":"19"},{"size":5086,"mtime":1602781426000,"results":"21","hashOfConfig":"19"},{"size":504,"mtime":1604943342002,"results":"22","hashOfConfig":"19"},{"size":4724,"mtime":1607430574572,"results":"23","hashOfConfig":"19"},{"size":749,"mtime":1607097378906,"results":"24","hashOfConfig":"19"},{"size":4318,"mtime":1606376756256,"results":"25","hashOfConfig":"19"},{"size":5054,"mtime":1606472119969,"results":"26","hashOfConfig":"19"},{"size":2422,"mtime":1605814919217,"results":"27","hashOfConfig":"19"},{"size":4825,"mtime":1607592445505,"results":"28","hashOfConfig":"19"},{"size":2013,"mtime":1605728625785,"results":"29","hashOfConfig":"19"},{"size":4313,"mtime":1606376745246,"results":"30","hashOfConfig":"19"},{"size":8927,"mtime":1607529038120,"results":"31","hashOfConfig":"19"},{"size":5200,"mtime":1607598295577,"results":"32","hashOfConfig":"19"},{"size":3187,"mtime":1607598118013,"results":"33","hashOfConfig":"19"},{"size":2297,"mtime":1605535658870,"results":"34","hashOfConfig":"19"},{"size":960,"mtime":1607420774469,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"sx7vzg",{"filePath":"39","messages":"40","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"38"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"38"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\index.js",[],["82","83"],"C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\App.js",["84","85","86","87","88","89","90","91","92","93","94"],"import React from 'react';\nimport {BrowserRouter as Router, Route, Redirect} from \"react-router-dom\";\nimport {Switch} from \"react-router-dom\";\nimport robot_image from './images/robot_illu3.png';\nimport './App.css';\nimport EmotionObject from './EmotionObject';\nimport ExpObject from './ExpObject';\nimport ExpEyeColor from './ExpEyeColor';\nimport ExpPupilSize from './ExpPupilSize';\nimport ExpPupilOrientation from './ExpPupilOrientation';\nimport {objectList} from './ExpObjectData';\nimport ExpMain from './ExpMain';\nimport PrevResult from './PrevResult';\nimport Result from './Result';\nimport ExpChoosePicture from './ExpChoosePicture';\nimport ExpPreGameInstruction from './ExpPreGameInstruction';\nimport ExpTakePicture from './ExpTakePicture';\nimport ExpSelectApproach from './ExpSelectApproach';\n\n// import * as faceapi from 'face-api.js';\n\n//expObject will hold the result of all the different views/state\n//emotionsObject will store the importen emotionsObject\n//emotionDisplay will store the emotion category acting as basis for the interaction\n//counter only necessary if DB\n//currentState will keep track on the view/state\n\nclass App extends React.Component{\n  constructor(props) {\n    super();\n    this.state = {expObject : [], emotionsObject : [], emotionDisplay: '', counter : 1, currentState: 0, selectedImage: '', faceRecEmotions: {}};\n    this.faceRec = this.faceRec.bind(this)\n  }\n\n  faceRec(imgSrc) {\n    // await faceapi.nets.ssdMobilenetv1.loadFromUri('/models');\n    // await faceapi.nets.faceLandmark68Net.loadFromUri('/models');\n    // await faceapi.nets.faceExpressionNet.loadFromUri('/models');\n\n    // const image = await faceapi.fetchImage(imgSrc);\n    // // const image = await faceapi.fetchImage('/images/stock_disgusted2.jpg');\n    // const canvas = faceapi.createCanvasFromMedia(image);\n\n    // // console.log(canvas);\n    // // const detection = await faceapi.detectAllFaces(image)\n    // //                                 .withFaceLandmarks()\n    // //                                 .withFaceExpressions();\n    // const detection = await faceapi.detectSingleFace(image)\n    //                                 .withFaceLandmarks()\n    //                                 .withFaceExpressions();\n                                    \n    // // console.log(detection);\n    // // console.log(detection.expressions);\n\n    // let emotions = {...detection.expressions};\n\n    //  const dimensions = {\n    //      width: image.width,\n    //      height: image.height\n    //  };\n\n    //  const resizedDimensions = faceapi.resizeResults(detection, dimensions);\n\n    // // document.body.append(canvas);\n    // // document.getElementById(\"faceImageWrapper\").append(canvas);\n    // // var c = document.getElementById(\"faceImageWrapper\");\n    // // console.log(c);\n\n    // faceapi.draw.drawDetections(canvas, resizedDimensions);\n    // faceapi.draw.drawFaceLandmarks(canvas, resizedDimensions);\n    // faceapi.draw.drawFaceExpressions(canvas, resizedDimensions);\n\n    //  this.setState({selectedImage: imgSrc, faceRecEmotions: emotions, landmarks: canvas});\n     this.setState({selectedImage: imgSrc});\n}\n\n  //Application mount and the emotionObjects is imported and set this.state (emotionsObject)\n  componentDidMount() {\n    let emotionsObject = new EmotionObject();\n    const data = objectList;\n    const mapRows = data.map(emotion => (\n          emotionsObject.addEmotion(emotion.id, emotion.emotionCat, emotion.emotions, emotion.boolean, emotion.value, emotion.faceRecEmotion, emotion.barColor, emotion.resultImages)\n    ));\n    this.setState({emotionsObject: emotionsObject.emotionsObject});\n  }\n\n  //Trigger an Image from IKAROS and the response is converted to json if the repsonse is to be used\n  takePicture = () => {\n    fetch('http://192.168.1.140:8000/control/ImageTrigger.data/0/0/1', {\n        method: 'POST',\n        mode: 'CORS',\n        body: ' ',\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }).then(res => {\n        return res;\n    }).catch(err => console.log(err));\n    // fetch('http://192.168.1.140:8000/control/ImageTrigger.data/0/0/1')\n    //     .then(response => response.json());\n    // fetch('http://192.168.1.140:8000/control/ImageTrigger.data/0/0/0')\n    //     .then(response => response.json());\n  }\n\n  getPicture = () => {\n\n  }\n\n  playEmotion = () => {\n    fetch('http://127.0.0.1:8000/control/MotionTrigger.data/0/0/1 ')\n        .then(response => response.json());\n  }\n\n  //Start experiment -> create an ExpObject, generate a random number to be chosen as basis for the interaction\n  // the random number represent an emotion category. Set this.state (expObject and emotionDisplay)\n  // in this method if DB were to used the counter would also be increased\n  startExp = () => {\n    let newExpObject = new ExpObject();\n    const data = this.state.emotionsObject;\n    const mapRows = data.map(emotion => (\n          newExpObject.addEmotionObject(1, ({id: emotion.id, emotionCat: emotion.emotionCat, boolean: emotion.boolean, value: emotion.value, emotions: []})),\n          newExpObject.addEmotionObject(2, ({id: emotion.id, emotionCat: emotion.emotionCat, boolean: emotion.boolean, value: emotion.value, emotions: []})),\n          newExpObject.addEmotionObject(3, ({id: emotion.id, emotionCat: emotion.emotionCat, boolean: emotion.boolean, value: emotion.value, emotions: []}))\n    ));\n\n    let randomEmotion = Math.floor((Math.random() * objectList.length ) + 1);\n    this.setState({expObject: newExpObject.expObject, emotionDisplay:  randomEmotion});\n  }\n\n  //Change the current state and reset all emotions chosen by click\n  changeCurrentState = (stateValue) => {\n    let tempEmotionsObj = [...this.state.emotionsObject];\n    tempEmotionsObj.map(emObj =>{\n        emObj.emotions.map(emotion=>{\n            if (emotion.boolean){\n                emotion.boolean = !emotion.boolean;\n            }\n        })\n    })\n    this.setState({currentState : stateValue, emotionsObject : tempEmotionsObj, faceRecEmotions: this.state.faceRecEmotions});\n  }\n\n  //Update the current experiment-state and set this.state\n  updateExp = (expNumberObject) => {\n\n    let tempExp = [...this.state.expObject];\n    if (this.state.currentState == 0){\n      tempExp[this.state.currentState].expOne = expNumberObject;\n    } else if (this.state.currentState == 1){\n        tempExp[this.state.currentState].expTwo = expNumberObject;\n    } else if (this.state.currentState == 2){\n        tempExp[this.state.currentState].expThree = expNumberObject;\n    }\n    this.setState(prevState => ({\n        expObject: tempExp,\n        faceRecEmotions: this.state.faceRecEmotions\n      }))\n  }\n\n  setFaceRecEmotions = (emotions) => {\n    //console.log('state')\n    // console.log(this.state)\n    // console.log(emotions);\n    if(Object.keys(this.state.faceRecEmotions).length === 0)\n      this.setState({expObject : this.state.expObject, \n                     emotionsObject : this.state.emotionsObject, \n                     faceRecEmotions: emotions});\n  }\n\n  //If exit from experiment -> clear the states. If DB were to be used you would need to handle it in this method\n  exitExp = () => {\n    this.setState({expObject : [], emotionDisplay: '', counter : 1, currentState: 0});\n  };\n\n  render() {\n    let emotions = this.state.emotionsObject;\n    let emDisplay = this.state.emotionDisplay;\n    let stateValue = this.state.currentState;\n    let experiment = this.state.expObject;\n    let selectedImage = this.state.selectedImage;\n    let faceRecEmotions = this.state.faceRecEmotions;\n  //let landmarks = this.state.landmarks; // kolla om används, annars ta bort\n    let currentEmotion;\n\n    const expEyeColorElem = (params) => <ExpEyeColor {...params} expObject={experiment} emotionsObject={emotions} currentState={stateValue} emotionDisplay={emDisplay} callbackFromParent={this.updateExp} callbackFromParentExit={this.exitExp}/>;\n    const expPupilSizeElem = (params) => <ExpPupilSize {...params} expObject={experiment} emotionsObject={emotions} currentState={stateValue} emotionDisplay={emDisplay} callbackFromParent={this.updateExp} callbackFromParentExit={this.exitExp}/>;\n    const expPupilOrientationElem = (params) => <ExpPupilOrientation {...params} expObject={experiment} emotionsObject={emotions} currentState={stateValue} emotionDisplay={emDisplay} callbackFromParent={this.updateExp} callbackFromParentExit={this.exitExp}/>;\n    const prevResultElem = (params) => <PrevResult {...params} currentState={stateValue} faceRecEmotions = {faceRecEmotions} callbackFromParent={this.changeCurrentState}/>;\n    const resultElem = (params) => <Result {...params} expObject={experiment} faceRecEmotions = {faceRecEmotions} selectedImage={selectedImage} emotionsObject={emotions} callbackFromParent={this.exitExp}/>;\n    const expMainElem = (params) => <ExpMain {...params}  callbackFromParent={this.startExp}/>;\n    const expSelectApproachElem = (params) => <ExpSelectApproach {...params}  callbackFromParent={this.exitExp}/>;\n    const expChoosePictureElem = (params) => <ExpChoosePicture {...params}  callbackFromParent={this.faceRec}/>;\n    const expTakePictureElem = (params) => <ExpTakePicture {...params}  callbackFromParent={this.takePicture}/>;\n    const expPreGameInstructionElem = (params) => <ExpPreGameInstruction {...params} selectedImage={selectedImage} callbackFromParent={this.setFaceRecEmotions}/>;\n\n    let val = JSON.stringify(this.state.expObject);\n\n        return (\n          <Router>\n            <div>\n              {/* <div className=\"jumbotron text-center\" style={{backgroundColor: 'white'}}>\n                <img src={robot_image} />\n                <spam>{val}</spam>\n                <div className=\"jumbotron text-center\" style={{backgroundColor: 'white'}}>\n              </div>\n              </div> */}              \n                <div className=\"form-group mt-20\"> \n                  <Switch>\n                    <Route exact path=\"/\">\n                      <Redirect to=\"/ExpMain\" />\n                    </Route>\n                    <Route path='/ExpChoosePicture' component = {expChoosePictureElem}/>\n                    <Route path='/ExpSelectApproach' component = {expSelectApproachElem}/>\n                    <Route path='/ExpPreGameInstruction' component = {expPreGameInstructionElem}/>\n                    <Route path='/ExpTakePicture' component = {expTakePictureElem}/>\n                    <Route path='/ExpMain' component = {expMainElem}/>\n                    <Route path='/ExpEyeColor' component={expEyeColorElem}/>\n                    <Route path='/ExpPupilSize' component={expPupilSizeElem}/>\n                    <Route path='/ExpPupilOrientation' component={expPupilOrientationElem}/>\n                    <Route path='/PrevResult' component={prevResultElem}/>\n                    <Route path='/Result' component={resultElem}/>\n                  </Switch>\n                </div>\n            </div>\n          </Router>\n      );    \n  } \n}\n\nexport default App;","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\serviceWorker.js",[],"C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpObject.js",["95","96","97"],"class ExpObject{\n    constructor() {\n        this.expObject = [{expOne: []}, {expTwo: []}, {expThree: []}];\n        \n    }\n    \n    addEmotionObject(expNumber, emotionObject){\n        if (expNumber == 1){\n            this.expObject[0].expOne.push(emotionObject);\n\n        }else if (expNumber == 2){\n            this.expObject[1].expTwo.push(emotionObject);\n\n        }else if (expNumber == 3){\n            this.expObject[2].expThree.push(emotionObject);\n\n        }\n    }\n     \n}\n\nexport default ExpObject;","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpEyeColor.js",["98","99","100","101","102","103","104","105","106","107"],"import React from 'react';\r\nimport ai_image from './images/abstract_ai.jpg';\r\nimport profilePic from './images/profilePic.jpg';\r\nimport { OverlayTrigger, Tooltip, Button, Container, Row, Col } from 'react-bootstrap';\r\n\r\nlet selectedCount = 0;\r\n\r\nclass ExpEyeColor extends React.Component{\r\n    constructor(props) {\r\n        super();\r\n    }\r\n\r\n    disableButton = () => {\r\n        if(selectedCount <= 0 || selectedCount > 5)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    //Transition to the next path/state\r\n    handleClick = (event, path) => {\r\n        this.props.history.push(path);\r\n    }\r\n\r\n    //If any emotion is chosen it will directly update the expObject param in this.state received from parent\r\n    //Trigger parent method UpdateExp()\r\n    //increasing the emotion category chosen by one\r\n    handleEmotionChange = (emotionId) => {\r\n        let tempEmotionsObj = [...this.props.emotionsObject];\r\n        let tempExpObject = [...this.props.expObject[this.props.currentState].expOne];\r\n        tempEmotionsObj.map(emObj =>{\r\n            emObj.emotions.map(emotion=>{\r\n                if (emotion.id === emotionId){\r\n                    emotion.boolean = !emotion.boolean;\r\n                    tempExpObject.map(expEmotion =>{\r\n                        if (expEmotion.emotionCat == emObj.emotionCat){\r\n                            emotion.boolean ? expEmotion.value += 1 : expEmotion.value -= 1;\r\n                            emotion.boolean ? selectedCount += 1 : selectedCount -= 1;\r\n                            this.props.callbackFromParent(tempExpObject);\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        })\r\n        console.log(selectedCount);\r\n    }\r\n\r\n    //Simply render the different emotionsObject received from the parent\r\n    renderItems = () => {\r\n        const data = this.props.emotionsObject;\r\n        const mapRows = data.map(emotionObj => (\r\n            emotionObj.emotions.map(emotion => (\r\n                <React.Fragment key = {emotion.id}>\r\n                    <button\r\n                    onClick={() => this.handleEmotionChange(emotion.id)}\r\n                    className={emotion.boolean ? 'btn btn-light btn-rounded selected' : 'btn btn-light btn-rounded deselected'}\r\n                    value = {emotion.id}>\r\n                        {emotion.emotion}\r\n                    </button>\r\n                </React.Fragment>\r\n            ))\r\n        ));\r\n        return mapRows;\r\n      };\r\n\r\n    //Trigger parent method exiExp() and return to home-page\r\n    exitExperiment = (event) => {\r\n        this.props.callbackFromParentExit();\r\n        this.props.history.push('/')\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // <Container>\r\n            //     <Row>\r\n            //         <Col xs={2}><img src={profilePic}/></Col>\r\n            //         <Col xs={7}>\r\n            //             <div  className=\"p-3 mb-2 bg-info text-white\" style={{backgroundImage: `url(${ai_image}` }}>\r\n            //                 <div required  multiple={true} id=\"emotionSelect\"  type=\"button\"  onClick={(e) => this.handleEmotionChange(e)}>\r\n            //                     {this.renderItems()}\r\n            //                 </div>\r\n            //             </div>\r\n            //         </Col>\r\n            //         <Col xs={1}>\r\n            //             <div className=\"\">\r\n            //                 <button  onClick={(e) => this.exitExperiment(e)} type=\"submit\" className=\"btn btn-danger\">Avbryt</button>\r\n            //                 <button  onClick={(e) => this.handleClick(e, '/PrevResult')} type=\"submit\" className=\"btn btn-success\">Nästa</button>\r\n            //             </div>\r\n            //         </Col>\r\n            //     </Row>\r\n            // </Container>\r\n            <div className=\"experiment-wrapper\" style={{backgroundImage: `url(${ai_image}` }}>\r\n                <div className=\"experiment-buttons\">\r\n                    <button onClick={(e) => this.exitExperiment(e)} type=\"submit\" className=\"btn btn-danger\">Avbryt</button>\r\n                    <Button disabled={this.disableButton()} onClick={(e) => this.handleClick(e, '/PrevResult')} type=\"submit\" className=\"btn btn-success button-next\">Nästa</Button>\r\n                </div>\r\n                <div  className=\"experiment-options\" >\r\n                    <div onClick={(e) => this.handleEmotionChange(e)}>\r\n                        {this.renderItems()}\r\n                    </div>\r\n                </div>\r\n                {/* <div className=\"experiment-image\">\r\n                    <img src={this.props.selectedImage}/>\r\n                </div> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExpEyeColor;","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\EmotionObject.js",[],"C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpPupilOrientation.js",["108","109","110","111","112"],"import React from 'react';\r\nimport ai_image from './images/abstract_ai.jpg';\r\nimport profilePic from './images/profilePic.jpg';\r\n\r\nclass ExpPupilOrientation extends React.Component{\r\n    constructor(props) {\r\n        super();\r\n    }\r\n\r\n    //Transition to the next path/state\r\n    handleClick = (event, path) => {\r\n        this.props.history.push(path);\r\n    }\r\n\r\n    //If any emotion is chosen it will directly update the expObject param in this.state received from parent\r\n    //Trigger parent method UpdateExp()\r\n    //increasing the emotion category chosen by one\r\n    handleEmotionChange = (emotionId) => {\r\n        let tempEmotionsObj = [...this.props.emotionsObject];\r\n        let tempExpObject = [...this.props.expObject[this.props.currentState].expThree];\r\n        tempEmotionsObj.map(emObj =>{\r\n            emObj.emotions.map(emotion=>{\r\n                if (emotion.id === emotionId){\r\n                    emotion.boolean = !emotion.boolean;\r\n                    tempExpObject.map(expEmotion =>{\r\n                        if (expEmotion.emotionCat == emObj.emotionCat){\r\n                            emotion.boolean ? expEmotion.value += 1 : expEmotion.value -= 1;\r\n                            this.props.callbackFromParent(tempExpObject);\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    //Simply render the different emotionsObject received from the parent\r\n    renderItems = () => {\r\n        const data = this.props.emotionsObject;\r\n        const mapRows = data.map(emotionObj => (\r\n            emotionObj.emotions.map(emotion => (\r\n                <React.Fragment key = {emotion.id}>\r\n                    <button\r\n                    onClick={() => this.handleEmotionChange(emotion.id)}\r\n                    className={emotion.boolean ? 'btn btn-light btn-rounded selected' : 'btn btn-light btn-rounded deselected'}\r\n                    value = {emotion.id}>\r\n                        {emotion.emotion}\r\n                    </button>\r\n                </React.Fragment>\r\n            ))\r\n        ));\r\n        return mapRows;\r\n      };\r\n    \r\n    //Trigger parent method exiExp() and return to home-page\r\n    exitExperiment = (event) => {\r\n        this.props.callbackFromParentExit();\r\n        this.props.history.push('/')\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // <Container>\r\n            //     <Row>\r\n            //         <Col xs={2}><img src={profilePic}/></Col>\r\n            //         <Col xs={7}>\r\n            //             <div  className=\"p-3 mb-2 bg-info text-white\" style={{backgroundImage: `url(${ai_image}` }}>\r\n            //                 <div required  multiple={true} id=\"emotionSelect\"  type=\"button\"  onClick={(e) => this.handleEmotionChange(e)}>\r\n            //                     {this.renderItems()}\r\n            //                 </div>\r\n            //             </div>\r\n            //         </Col>\r\n            //         <Col xs={1}>\r\n            //             <div className=\"\">\r\n            //                 <button  onClick={(e) => this.exitExperiment(e)} type=\"submit\" className=\"btn btn-danger\">Avbryt</button>\r\n            //                 <button  onClick={(e) => this.handleClick(e, '/PrevResult')} type=\"submit\" className=\"btn btn-success\">Nästa</button>\r\n            //             </div>\r\n            //         </Col>\r\n            //     </Row>\r\n            // </Container>\r\n            <div className=\"experiment-wrapper\" style={{backgroundImage: `url(${ai_image}` }}>\r\n                <div className=\"experiment-buttons\">\r\n                    <button  onClick={(e) => this.exitExperiment(e)} type=\"submit\" className=\"btn btn-danger\">Avbryt</button>\r\n                    <button  onClick={(e) => this.handleClick(e, '/PrevResult')} type=\"submit\" className=\"btn btn-success button-next\">Nästa</button>\r\n                </div>\r\n                <div  className=\"experiment-options\" >\r\n                    <div onClick={(e) => this.handleEmotionChange(e)}>\r\n                        {this.renderItems()}\r\n                    </div>\r\n                </div>\r\n                {/* <div className=\"experiment-image\">\r\n                    <img src={this.props.selectedImage}/>\r\n                </div> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExpPupilOrientation;","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpChoosePicture.js",["113"],"import React from 'react';\r\n// import ImageGallery from 'react-image-gallery';\r\n// import \"react-image-gallery/styles/css/image-gallery.css\";\r\nimport {Carousel} from 'react-responsive-carousel';\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\nimport $ from 'jquery';\r\n\r\nconst images = [\r\n    {\r\n        id: 1436436,\r\n        original: '/images/EpiImage.jpg',\r\n        thumbnail: '/images/EpiImage.jpg',\r\n      },\r\n      {\r\n        id: 164363,\r\n        original: '/images/EpiImage2.jpg',\r\n        thumbnail: '/images/EpiImage2.jpg',\r\n      },\r\n      {\r\n        id: 1344,\r\n        original: '/images/EpiImage3.jpg',\r\n        thumbnail: '/images/EpiImage.jpg',\r\n      },\r\n      {\r\n        id: 1456,\r\n        original: '/images/EpiImage4.jpg',\r\n        thumbnail: '/images/EpiImage4.jpg',\r\n      },\r\n      {\r\n        id: 1345,\r\n        original: '/images/EpiImage5.jpg',\r\n        thumbnail: '/images/EpiImage5.jpg',\r\n      },\r\n      {\r\n        id: 145,\r\n        original: '/images/EpiImage.jpg',\r\n        thumbnail: '/images/EpiImage6.jpg',\r\n      },\r\n    {\r\n      id: 1,\r\n      original: '/images/anger1.jpg',\r\n      thumbnail: '/images/anger1.jpg',\r\n    },\r\n    {\r\n      id: 2,\r\n      original: '/images/anger2.jpg',\r\n      thumbnail: '/images/anger2.jpg',\r\n    //   legend: 'bild 2',\r\n    },\r\n    {\r\n        id: 3,\r\n        original: '/images/anger3.jpg',\r\n        thumbnail: '/images/anger3.jpg',\r\n    },\r\n    {\r\n        id: 4,\r\n        original: '/images/anger4.jpg',\r\n        thumbnail: '/images/anger4.jpg',\r\n    },\r\n    {\r\n        id: 5,\r\n        original: '/images/stock_disgusted2.jpg',\r\n        thumbnail: '/images/stock_disgusted2.jpg',\r\n    },\r\n    {\r\n        id: 6,\r\n        original: '/images/disgust1.jpg',\r\n        thumbnail: '/images/disgust1.jpg',\r\n    },\r\n    {\r\n        id: 7,\r\n        original: '/images/disgust2.jpg',\r\n        thumbnail: '/images/disgust2.jpg',\r\n    },\r\n    {\r\n        id: 8,\r\n        original: '/images/disgust4.jpg',\r\n        thumbnail: '/images/disgust4.jpg',\r\n    },\r\n    {\r\n        id: 9,\r\n        original: '/images/fear1.jpg',\r\n        thumbnail: '/images/fear1.jpg',\r\n    },\r\n    {\r\n        id: 10,\r\n        original: '/images/fear2.jpg',\r\n        thumbnail: '/images/fear2.jpg',\r\n    },\r\n    {\r\n        id: 12,\r\n        original: '/images/joy2.jpg',\r\n        thumbnail: '/images/joy2.jpg',\r\n        legend: 'joy2',\r\n    },\r\n    {\r\n        id: 13,\r\n        original: '/images/joy3.jpg',\r\n        thumbnail: '/images/joy3.jpg',\r\n    },\r\n    {\r\n        id: 14,\r\n        original: '/images/joy4.jpg',\r\n        thumbnail: '/images/joy4.jpg',\r\n    },\r\n    {\r\n        id: 15,\r\n        original: '/images/sad1.jpg',\r\n        thumbnail: '/images/sad1.jpg',\r\n    },\r\n    {\r\n        id: 16,\r\n        original: '/images/sad2.jpg',\r\n        thumbnail: '/images/sad2.jpg',\r\n    },\r\n    {\r\n        id: 16,\r\n        original: '/images/surprise1.jpg',\r\n        thumbnail: '/images/surprise1.jpg',\r\n    },\r\n    {\r\n        id: 16,\r\n        original: '/images/surprise2.jpg',\r\n        thumbnail: '/images/surprise2.jpg',\r\n    },\r\n    {\r\n        id: 16,\r\n        original: '/images/surprise3.jpg',\r\n        thumbnail: '/images/surprise3.jpg',\r\n    },\r\n  ];\r\n\r\nclass ExpChoosePicture extends React.Component{\r\n    constructor(props) {\r\n        super()\r\n    }\r\n\r\n    //Transition to the next path/state\r\n    handleClick = (event, path) => {\r\n        this.props.history.push(path);\r\n    }\r\n\r\n    clickedThisBitch = (id) => {\r\n        console.log(\"clickedThisBitch\" + id);\r\n    }\r\n\r\n    choosePicture = (event) => {\r\n        let image = $('.selected img').attr('src');\r\n        console.log(image);\r\n        this.props.callbackFromParent(image); //pass image\r\n        this.handleClick(event, '/ExpPreGameInstruction')\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"CarouselWrapper\">\r\n                    <Carousel swipeable={true} showArrows={true}>\r\n                        {images.map((image, index) => {\r\n                            return <div\r\n                                        onClick={() => this.clickedThisBitch(image.id)}\r\n                                        key={image.id}\r\n                                    >\r\n                                    <img src={image.original} />\r\n                                    <p className=\"legend\">{image.legend}</p>\r\n                                    </div>\r\n                            })\r\n                        }\r\n                    </Carousel>\r\n                </div>\r\n                {/* Removed class jumbotron */}\r\n                <div className= \"text-center\"> \r\n                    <button  onClick={(e) => this.handleClick(e, '/ExpSelectApproach')} type=\"submit\" className=\"btn btn-primary\">Tillbaka</button>\r\n                    <button  onClick={(e) => this.choosePicture(e)} type=\"submit\" className=\"btn btn-primary\">Nästa</button>\r\n                </div>\r\n                <div className=\"form-group mt-20\"></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExpChoosePicture;","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpMain.js",[],"C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpObjectData.js",["114"],"/* Make room for more extensive data collection */\n\nexport const objectList = [\n    { \n        id: 1, \n        emotionCat: \"Anger\", \n        faceRecEmotion: 'angry',\n        boolean: false,\n        value: 0,\n        barColor: \"#FB525A\",\n        emotions: [\n            {id: 11, emotion: 'Angry', boolean: false},\n            {id: 12, emotion: 'Threatened', boolean: false},\n            {id: 13, emotion: 'Offended', boolean: false}\n        ],\n        resultImages: [\n            {id: 1, order: 1, src: '/images/Arg1.jpg', emVidSrc: '/videos/Arg1.mp4'},\n            {id: 2, order: 2, src: '/images/Arg2.jpg', emVidSrc: '/videos/Arg2.mp4'},\n            {id: 3, order: 3, src: '/images/Arg3.jpg', emVidSrc: '/videos/Arg3.mp4'}\n        ]\n    },\n    { \n        id: 2, \n        emotionCat: \"Happiness\", \n        faceRecEmotion: 'happy',\n        boolean: false,\n        barColor: \"#FFD65D\",\n        value: 0,\n        emotions: [\n            {id: 14, emotion: 'Happy', boolean: false},\n            {id: 15, emotion: 'Excited', boolean: false},\n            {id: 16, emotion: 'Confident', boolean: false}\n        ],\n        resultImages: [\n            {id: 1, order: 1, src: '/images/Glad1.jpg', emVidSrc: './videos/Glad1.mp4'},\n            {id: 2, order: 2, src: '/images/Glad2.jpg', emVidSrc: './videos/Glad2.mp4'},\n            {id: 3, order: 3, src: '/images/Glad3.jpg', emVidSrc: './videos/Glad3.mp4'}\n        ]\n    },\n    { \n        id: 3, \n        emotionCat: \"Sadness\", \n        faceRecEmotion: 'sad',\n        boolean: false,\n        value: 0,\n        barColor: \"#2884C6\",\n        emotions: [\n            {id: 17, emotion: 'Sad', boolean: false},\n            {id: 18, emotion: 'Hurt', boolean: false},\n            {id: 19, emotion: 'Lonely', boolean: false}\n        ],\n        resultImages: [\n            {id: 1, order: 1, src: '/images/Ledsen1.jpg', emVidSrc: '/videos/Ledsen1.mp4'},\n            {id: 2, order: 2, src: '/images/Ledsen2.jpg', emVidSrc: '/videos/Ledsen2.mp4'},\n            {id: 3, order: 3, src: '/images/Ledsen3.jpg', emVidSrc: '/videos/Ledsen3.mp4'}\n        ]\n    },\n    { \n        id: 4, \n        emotionCat: \"Surprise\", \n        faceRecEmotion: 'surprised',\n        boolean: false,\n        value: 0,\n        barColor: \"#67F4D8\",\n        emotions: [\n            {id: 20, emotion: 'Surprised', boolean: false},\n            {id: 21, emotion: 'Amazed', boolean: false},\n            {id: 22, emotion: 'Startled', boolean: false}\n        ],\n        resultImages: [\n            {id: 1, order: 1, src: '/images/Överaskad1.jpg', emVidSrc: '/videos/Överaskad1.mp4'},\n            {id: 2, order: 2, src: '/images/Överaskad2.jpg', emVidSrc: '/videos/Överaskad2.mp4'},\n            {id: 3, order: 3, src: '/images/Överaskad3.jpg', emVidSrc: '/videos/Överaskad3.mp4'}\n        ]\n    },\n    { \n        id: 5, \n        emotionCat: \"Fear\", \n        faceRecEmotion: 'fearful',\n        boolean: false,\n        value: 0,\n        barColor: \"#784DA3\",\n        emotions: [\n            {id: 23, emotion: 'Scared', boolean: false},\n            {id: 24, emotion: 'Worried', boolean: false},\n            {id: 25, emotion: 'Insecure', boolean: false}\n        ],\n        resultImages: [\n            {id: 1, order: 1, src: '/images/Rädd1.jpg', emVidSrc: '/videos/Rädd1.mp4'},\n            {id: 2, order: 2, src: '/images/Rädd2.jpg', emVidSrc: '/videos/Rädd2.mp4'},\n            {id: 3, order: 3, src: '/images/Rädd3.jpg', emVidSrc: '/videos/Rädd3.mp4'}\n        ]\n    },\n    { \n        id: 6, \n        emotionCat: \"Disgust\", \n        faceRecEmotion: 'disgusted',\n        boolean: false,\n        value: 0,\n        barColor: \"#3CA938\",\n        emotions: [\n            {id: 26, emotion: 'Disgusted', boolean: false},\n            {id: 27, emotion: 'Resentful', boolean: false},\n            {id: 28, emotion: 'Averse', boolean: false}\n        ],\n        resultImages: [\n            {id: 1, order: 1, src: '/images/Äcklad1.jpg', emVidSrc: '/videos/Äcklad1.mp4'},\n            {id: 2, order: 2, src: '/images/Äcklad2.jpg', emVidSrc: '/videos/Äcklad2.mp4'},\n            {id: 3, order: 3, src: '/images/Äcklad3.jpg', emVidSrc: '/videos/Äcklad3.mp4'}\n        ]\n    },\n    { \n        id: 7, \n        emotionCat: \"Neutral\", \n        faceRecEmotion: 'neutral',\n        boolean: false,\n        value: 0,\n        barColor: \"#FFFFFF\",\n        emotions: [\n            {id: 29, emotion: 'Neutral', boolean: false},\n            {id: 30, emotion: 'Neutral', boolean: false},\n            {id: 31, emotion: 'Neutral', boolean: false}\n        ],\n        resultImages: [\n            {id: 1, order: 1, src: '', emVidSrc: '/videos/Neutral3.mp4'},\n            {id: 2, order: 2, src: '', emVidSrc: '/videos/Neutral3.mp4'},\n            {id: 3, order: 3, src: '', emVidSrc: '/videos/Neutral3.mp4'}\n        ]\n    }      \n]\n\nexport default {\n    objectList,\n}","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpTakePicture.js",[],"C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpPupilSize.js",["115","116","117","118","119"],"import React from 'react';\r\nimport ai_image from './images/abstract_ai.jpg'\r\nimport profilePic from './images/profilePic.jpg';\r\n\r\nclass ExpPupilSize extends React.Component{\r\n    constructor(props) {\r\n        super();\r\n    }\r\n\r\n    //Transition to the next path/state\r\n    handleClick = (event, path) => {\r\n        this.props.history.push(path);\r\n    }\r\n\r\n    //If any emotion is chosen it will directly update the expObject param in this.state received from parent\r\n    //Trigger parent method UpdateExp()\r\n    //increasing the emotion category chosen by one\r\n    handleEmotionChange = (emotionId) => {\r\n        let tempEmotionsObj = [...this.props.emotionsObject];\r\n        let tempExpObject = [...this.props.expObject[this.props.currentState].expTwo];\r\n        tempEmotionsObj.map(emObj =>{\r\n            emObj.emotions.map(emotion=>{\r\n                if (emotion.id === emotionId){\r\n                    emotion.boolean = !emotion.boolean;\r\n                    tempExpObject.map(expEmotion =>{\r\n                        if (expEmotion.emotionCat == emObj.emotionCat){\r\n                            emotion.boolean ? expEmotion.value += 1 : expEmotion.value -= 1;\r\n                            this.props.callbackFromParent(tempExpObject);\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    //Simply render the different emotionsObject received from the parent\r\n    renderItems = () => {\r\n        const data = this.props.emotionsObject;\r\n        const mapRows = data.map(emotionObj => (\r\n            emotionObj.emotions.map(emotion => (\r\n                <React.Fragment key = {emotion.id}>\r\n                    <button\r\n                    onClick={() => this.handleEmotionChange(emotion.id)}\r\n                    className={emotion.boolean ? 'btn btn-light btn-rounded selected' : 'btn btn-light btn-rounded deselected'}\r\n                    value = {emotion.id}>\r\n                        {emotion.emotion}\r\n                    </button>\r\n                </React.Fragment>\r\n            ))\r\n        ));\r\n        return mapRows;\r\n      };\r\n    \r\n    //Trigger parent method exiExp() and return to home-page\r\n    exitExperiment = (event) => {\r\n        this.props.callbackFromParentExit();\r\n        this.props.history.push('/')\r\n    }\r\n\r\n    render() {\r\n        return (            \r\n            // <Container>\r\n            //     <Row>\r\n            //         <Col xs={2}><img src={profilePic}/></Col>\r\n            //         <Col xs={7}>\r\n            //             <div  className=\"p-3 mb-2 bg-info text-white\" style={{backgroundImage: `url(${ai_image}` }}>\r\n            //                 <div required  multiple={true} id=\"emotionSelect\"  type=\"button\"  onClick={(e) => this.handleEmotionChange(e)}>\r\n            //                     {this.renderItems()}\r\n            //                 </div>\r\n            //             </div>\r\n            //         </Col>\r\n            //         <Col xs={1}>\r\n            //             <div className=\"\">\r\n            //                 <button  onClick={(e) => this.exitExperiment(e)} type=\"submit\" className=\"btn btn-danger\">Avbryt</button>\r\n            //                 <button  onClick={(e) => this.handleClick(e, '/PrevResult')} type=\"submit\" className=\"btn btn-success\">Nästa</button>\r\n            //             </div>\r\n            //         </Col>\r\n            //     </Row>\r\n            // </Container>\r\n            <div className=\"experiment-wrapper\" style={{backgroundImage: `url(${ai_image}` }}>\r\n                <div className=\"experiment-buttons\">\r\n                    <button  onClick={(e) => this.exitExperiment(e)} type=\"submit\" className=\"btn btn-danger\">Avbryt</button>\r\n                    <button  onClick={(e) => this.handleClick(e, '/PrevResult')} type=\"submit\" className=\"btn btn-success button-next\">Nästa</button>\r\n                </div>\r\n                <div  className=\"experiment-options\" >\r\n                    <div onClick={(e) => this.handleEmotionChange(e)}>\r\n                        {this.renderItems()}\r\n                    </div>\r\n                </div>\r\n                {/* <div className=\"experiment-image\">\r\n                    <img src={this.props.selectedImage}/>\r\n                </div> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExpPupilSize;","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\Result.js",["120","121","122","123","124","125","126","127","128","129","130","131"],"import React from 'react';\r\n// import { ProgressBar } from 'react-bootstrap';\r\nimport ExpEyeColor from './ExpEyeColor';\r\nimport Progress from 'react-progressbar';\r\n// import ReactWordcloud from 'react-wordcloud';\r\nimport ProgressBar from \"./progress-bar.component\";\r\nimport ai_image from './images/robot_illu.png';\r\nimport {objectList} from './ExpObjectData';\r\n\r\n// const barColors = [\r\n//     { emotion: 'Anger', faceRecEmotion: 'angry' ,bgcolor: \"#FB525A\"},\r\n//     { emotion: 'Sadness', faceRecEmotion: 'sad' ,bgcolor: \"#2884C6\"},\r\n//     { emotion: 'Happiness', faceRecEmotion: 'happy' ,bgcolor: \"#FFD65D\"},\r\n//     { emotion: 'Surprise', faceRecEmotion: 'surprised' ,bgcolor: \"#67F4D8\"},\r\n//     { emotion: 'Disgust', faceRecEmotion: 'disgusted' ,bgcolor: \"#3CA938\"},\r\n//     { emotion: 'Fear', faceRecEmotion: 'fearful' ,bgcolor: \"#784DA3\"},\r\n//     { emotion: 'Neutral', faceRecEmotion: 'neutral' ,bgcolor: \"#FFFFFF\"},\r\n//   ];\r\n\r\n  const emotionData = [\r\n      {expOne: [], totVal: 0},\r\n      {expTwo: [], totVal: 0},\r\n      {expThree: [], totVal: 0}\r\n  ]\r\n  \r\n  let epiResult = [];\r\n\r\n  const imageStyle = {\r\n    maxWidth: '300px'\r\n  }\r\n\r\n  const divInlineBlock = {\r\n      display: 'inline-block'\r\n  }\r\n\r\nconst epiResultWrapper = {\r\n    display: 'flex'\r\n}\r\n\r\nconst epiEmotionBar = {\r\n    flex: '8'\r\n}\r\n\r\nconst resultImageWrapper ={\r\n    flex:'2', \r\n    width:'200px',\r\n    height:'200px'\r\n}\r\n\r\nconst resultImage = {\r\n    width: '100%',\r\n    height: '100%'\r\n}\r\n\r\nclass Result extends React.Component {\r\n    constructor(props){\r\n        super();\r\n    }\r\n\r\n    //Trigger parent method exiExp() and return to home-page\r\n    exitExperiment = (event) => {\r\n        this.props.callbackFromParent();\r\n        this.props.history.push('/')\r\n    }\r\n\r\n    newExperiment = (event, path) => {\r\n        this.props.callbackFromParent();\r\n        this.props.history.push(path)\r\n    }\r\n\r\n    componentDidMount(){\r\n        //console.log(this.props.faceRecEmotions);\r\n        // console.log(this.props.emotionsObject);\r\n        // this.getResultImage(0, this.props.faceRecEmotions);\r\n        // this.getResultImage(1, this.props.faceRecEmotions);\r\n        // this.getResultImage(2, this.props.faceRecEmotions);\r\n    }\r\n\r\n    getResultImage(curr, faceRecEmotions){\r\n        // console.log(faceRecEmotions)\r\n\r\n        // const sortable = Object.fromEntries(\r\n        //     Object.entries(faceRecEmotions).sort(([,a],[,b]) => a-b)\r\n        // );\r\n        \r\n        // console.log(sortable);\r\n        //flytta till en global constant, då det endast behövs beräknas en gång per experiment\r\n        const max = Object.keys(faceRecEmotions).reduce((a, b) => faceRecEmotions[a] > faceRecEmotions[b] ? a : b);\r\n        // console.log(max);\r\n\r\n        const currImg = objectList.find(x => x.faceRecEmotion === max).resultImages[curr].src;\r\n        return currImg;\r\n    }\r\n\r\n    renderEpiResults(){\r\n        const eR = Object.entries(this.props.faceRecEmotions);\r\n\r\n        eR.forEach(([key, value]) => {\r\n            epiResult.push({emotionCat: key, value: value});\r\n        })\r\n\r\n        // epiResult.map((item) => (\r\n        //     console.log(item.value)\r\n        // ))\r\n        \r\n        return(\r\n            <div style={epiResultWrapper}>\r\n                <div style={resultImageWrapper}>\r\n                    <img style={resultImage} src={this.props.selectedImage}/>\r\n                </div>  \r\n                <div style={epiEmotionBar}>\r\n                    {epiResult.map((item) => (\r\n                        <div>\r\n                         {/* <div style={({display: item.value * 100 > 5  ? 'inline-block' : 'none', width: '70%'})}> */}\r\n                        {/* <div style={epiEmotionBar} style={({display: item.value * 100 > 5  ? 'inline-block' : 'none', width: '70%'})}> */}\r\n                            { item.value * 100 > 5 ? <div className=\"emotion-category\">{item.emotionCat}</div> : null}\r\n                            {/* { item.value * 100 > 5 ?<ProgressBar bgcolor={\"#6a1b9a\"} completed={item.value * 100} /> : null} */}\r\n                            { item.value * 100 > 5 ?<ProgressBar bgcolor={objectList.find(x => x.faceRecEmotion === item.emotionCat).barColor} completed={item.value * 100} /> : null}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const expObject = this.props.expObject\r\n\r\n        for (const [key, value] of Object.entries(expObject[0].expOne)) {            \r\n            if(value.value > 0)\r\n            {\r\n                emotionData[0].expOne.push({'emotionCat': value.emotionCat, 'value': value.value})\r\n                emotionData[0].totVal += value.value;\r\n            }\r\n        }\r\n\r\n        for (const [key, value] of Object.entries(expObject[1].expTwo)) {\r\n            emotionData[1].totVal += value.value;\r\n            if(value.value > 0)\r\n                emotionData[1].expTwo.push({'emotionCat': value.emotionCat, 'value': value.value})\r\n        }\r\n\r\n        for (const [key, value] of Object.entries(expObject[2].expThree)) {\r\n            emotionData[2].totVal += value.value;\r\n            if(value.value > 0)\r\n                emotionData[2].expThree.push({'emotionCat': value.emotionCat, 'value': value.value})\r\n        }\r\n\r\n    return (\r\n        <div className=\"result-wrapper\">\r\n            <div>Dina bedömningar / Vad epi har lärt sig</div>\r\n            <div>\r\n                <div style={epiResultWrapper}>\r\n                    <div style={resultImageWrapper}>\r\n                        <img style={resultImage} src={this.getResultImage(0, this.props.faceRecEmotions)}/>\r\n                    </div>\r\n                    <div style={epiEmotionBar}>\r\n                        {emotionData[0].expOne.map((item, idx) => (\r\n                            <div>\r\n                            <div className=\"emotion-category\">{item.emotionCat}</div>                    \r\n                            <ProgressBar key={idx} bgcolor={objectList.find(x => x.emotionCat === item.emotionCat).barColor} completed={item.value/emotionData[0].totVal*100} />\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n\r\n                <div style={epiResultWrapper}>\r\n                    <div  style={resultImageWrapper}>\r\n                        <img style={resultImage} src={this.getResultImage(1, this.props.faceRecEmotions)}/>\r\n                    </div>\r\n                    <div style={epiEmotionBar}>\r\n                        {emotionData[1].expTwo.map((item, ids) => (\r\n                            <div>\r\n                            <div className=\"emotion-category\">{item.emotionCat}</div>                    \r\n                            <ProgressBar key={ids} bgcolor={objectList.find(x => x.emotionCat === item.emotionCat).barColor} completed={item.value/emotionData[1].totVal*100} />\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n\r\n                <div style={epiResultWrapper}>\r\n                    <div  style={resultImageWrapper}>\r\n                        <img style={resultImage} src={this.getResultImage(2, this.props.faceRecEmotions)}/>\r\n                    </div>\r\n                    <div style={epiEmotionBar}>\r\n                        {emotionData[2].expThree.map((item, id) => (\r\n                            <div>\r\n                            <div className=\"emotion-category\">{item.emotionCat}</div>                    \r\n                            <ProgressBar key={id} bgcolor={objectList.find(x => x.emotionCat === item.emotionCat).barColor} completed={item.value/emotionData[2].totVal*100} />\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            \r\n\r\n            </div>\r\n\r\n            <div className=\"epiEmotionRec\">\r\n                {/* <div>\r\n                    <img style={imageStyle} src={this.props.selectedImage}/>\r\n                </div> */}\r\n                <div>Hur epi analyserade dina känslor</div>\r\n                {this.renderEpiResults()}\r\n                {/* {epiResult.map((item, idx) => (\r\n                    <div>\r\n                        <div className=\"emotion-category\">{item.emotionCat}</div>                    \r\n                        <ProgressBar key={idx} bgcolor={\"#6a1b9a\"} completed={item.value * 100} />\r\n                    </div>\r\n                ))} */}\r\n            </div>\r\n\r\n            <div className=\"jumbotron text-center\" style={{backgroundColor: 'white'}}>\r\n                <button  onClick={(e) => this.newExperiment(e, '/ExpSelectApproach')} type=\"submit\" className=\"btn btn-primary\">Ny emotion</button>  \r\n                <button  onClick={(e) => this.exitExperiment(e)} type=\"submit\" className=\"btn btn-primary\">Exit</button>  \r\n            </div>\r\n\r\n        </div>\r\n        \r\n    );\r\n    }\r\n}\r\n\r\nexport default Result;","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpPreGameInstruction.js",["132","133","134","135"],"import React from 'react';\r\n// import * as canvas from 'canvas';\r\nimport * as faceapi from 'face-api.js';\r\nimport Spinner from 'react-bootstrap/Spinner'\r\n\r\nconst imageWrapper = {\r\n    display: 'inline-block',\r\n    textAlign: 'center'\r\n}\r\n\r\nconst drawCanvas = {\r\n    display: 'inline-block',\r\n    float: 'right',\r\n    textAlign: 'center'\r\n}\r\n\r\nconst imageStyle = {\r\n    maxWidth: '300px'\r\n}\r\n\r\nconst loaderWrapper = {\r\n    textAlign: 'center'\r\n}\r\n\r\nconst spinner = {\r\n    width: '300px',\r\n    height: '300px'\r\n}\r\n\r\nvar emotions = {};\r\n\r\nclass ExpPreGameInstruction extends React.Component{\r\n    constructor(props) {\r\n        super()\r\n    }\r\n    \r\n    componentDidMount(){\r\n        // console.log(this.props.faceRecEmotions);\r\n        this.drawCanvas();\r\n    }\r\n\r\n    handleClick = (event, path) => {\r\n        this.props.history.push(path);\r\n    }\r\n\r\n    async drawCanvas() {\r\n        await faceapi.nets.ssdMobilenetv1.loadFromUri('/models');\r\n        await faceapi.nets.faceLandmark68Net.loadFromUri('/models');\r\n        await faceapi.nets.faceExpressionNet.loadFromUri('/models');\r\n        // const image = await faceapi.fetchImage('/images/stock_disgusted2.jpg');\r\n\r\n        const image = await faceapi.fetchImage(this.props.selectedImage);\r\n        \r\n        const canvas = faceapi.createCanvasFromMedia(image);\r\n\r\n        // const detection = await faceapi.detectAllFaces(image)\r\n        //                                 .withFaceLandmarks()\r\n        //                                 .withFaceExpressions();\r\n        const detection = await faceapi.detectSingleFace(image)\r\n                                        .withFaceLandmarks()\r\n                                        .withFaceExpressions();\r\n                                        \r\n        // console.log(detection);\r\n        // console.log(detection.expressions);\r\n    \r\n        emotions = {...detection.expressions};\r\n        console.log(emotions);\r\n         const dimensions = {\r\n             width: image.width,\r\n             height: image.height\r\n         };\r\n    \r\n         const resizedDimensions = faceapi.resizeResults(detection, dimensions);\r\n    \r\n        // document.body.append(canvas);\r\n        // document.getElementById(\"faceImageWrapper\").append(canvas);\r\n        // var c = document.getElementById(\"faceImageWrapper\");\r\n        // console.log(c);\r\n\r\n        // this.setState({faceRecEmotions: emotions});\r\n\r\n        let div = document.getElementById('drawCanvas'); \r\n\r\n        div.appendChild(canvas)\r\n    \r\n        // faceapi.draw.drawDetections(canvas, resizedDimensions);\r\n        faceapi.draw.drawFaceLandmarks(canvas, resizedDimensions);\r\n\r\n\r\n        this.props.callbackFromParent(emotions);\r\n        // faceapi.draw.drawFaceExpressions(canvas, resizedDimensions);\r\n        // console.log(this.state);\r\n    }\r\n\r\n    renderInstructions(){        \r\n        return(\r\n            <div>\r\n                <div id=\"drawCanvas\" style={drawCanvas}></div>\r\n                <div style={imageWrapper} id=\"faceImageWrapper\">\r\n                    <img id=\"faceImage\" style={imageStyle} src={this.props.selectedImage}/>\r\n                </div>\r\n\r\n                <div>\r\n                    Epi kommer försöka lära sig känslan som du har demonstrerat (input), men eftersom att Epi inte har något självmedvetande måste han få en bedömning (feedback) på hur hans känslouttryck (output) uppfattas, dvs, hur han ser ut, så att han kan lära sig att försbättra sitt uttryck.\r\n                </div>\r\n                <div>\r\n                    Epi kommer försöka uttrycka känslan fler gånger. Efter varje försök bedömer du Epis uttryck. Epi använder din bedömning för att justera sitt nästa försök.\r\n                </div>\r\n                \r\n                <div className= \"jumbotron text-center\">\r\n                    <button  onClick={(e) => this.handleClick(e, '/ExpSelectApproach')} type=\"submit\" className=\"btn btn-primary\">Ny bild</button>\r\n                    <button  onClick={(e) => this.handleClick(e, '/ExpEyeColor')} type=\"submit\" className=\"btn btn-primary\">Starta spelet</button>\r\n                </div>\r\n\r\n                <div className=\"form-group mt-20\">\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // <div>\r\n            //     { \r\n            //         Object.entries(this.props.faceRecEmotions).length === 0 ? \r\n            //             <div style={loaderWrapper}> \r\n            //                 <Spinner style={spinner} animation=\"border\" variant=\"primary\" />\r\n            //             </div>  \r\n            //         : this.renderInstructions()\r\n            //     }\r\n            // </div>\r\n        //     <div>\r\n        //     { \r\n        //         Object.entries(emotions).length === 0 ? \r\n        //             <div style={loaderWrapper}> \r\n        //                 <Spinner style={spinner} animation=\"border\" variant=\"primary\" />\r\n        //             </div>  \r\n        //         : this.renderInstructions()\r\n        //     }\r\n        // </div>\r\n        <div>\r\n        { \r\n            this.renderInstructions()\r\n        }\r\n    </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExpPreGameInstruction;","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\PrevResult.js",["136","137"],"import React from 'react';\n// import ReactWordcloud from 'react-wordcloud';\nimport {objectList} from './ExpObjectData';\nimport vid from './videos/Överaskad3.MOV';\n \nlet tempPath = 0;\n\nclass PrevResult extends React.Component {\n    constructor(props){\n        super()\n        this.state = {tempStateValue : '', tempPath : ''}\n    }\n\n    startEmotion = () => {\n    }\n\n    // playEmotion = () => {\n    //   fetch('http://127.0.0.1:8000/control/MotionTrigger.data/0/0/1 ')\n    //       .then(response => response.json());\n    // }\n\n    //Based on the current state, currentState will be changed\n    //also introduce a timeout before moving to the next path/state\n    componentDidMount(){\n        // this.state.tempStateValue = this.props.currentState;\n        // console.log(this.props.history);\n        // curr = this.props.currentState;\n\n        // // this.timeoutHandle = setTimeout(()=>{\n        //     if (this.state.tempStateValue == 0){\n        //         this.state.tempPath = '/ExpPupilSize';\n        //         this.props.callbackFromParent(1);\n        //     }else if (this.state.tempStateValue == 1){\n        //         this.state.tempPath = '/ExpPupilOrientation'\n        //         this.props.callbackFromParent(2);\n        //     }else if (this.state.tempStateValue == 2){\n        //         this.state.tempPath = '/Result'\n        //         this.props.callbackFromParent(3);\n        //     }else{\n        //         this.state.tempPath = 0\n        //     }\n            // this.setState({ })}, 12000);\n            // this.setState({ })}, 20000);\n        }\n\n        getRecording = () =>{\n          let faceRecEmotions = this.props.faceRecEmotions;\n\n          const max = Object.keys(faceRecEmotions).reduce((a, b) => faceRecEmotions[a] > faceRecEmotions[b] ? a : b);\n\n          const currRec = objectList.find(x => x.faceRecEmotion === max).resultImages[this.props.currentState].emVidSrc;\n          console.log()\n\n          console.log(currRec);\n          return currRec;\n        }\n            \n    //Transition to the next path/state\n    // componentWillUnmount(){\n    //     if (this.state.tempPath != 0){\n    //         this.props.history.push(this.state.tempPath);\n    //     }\n    //     clearTimeout(this.timeoutHandle);\n    // }\n\n    videoEnded = () => {\n        if (this.props.currentState === 0){\n            tempPath = '/ExpPupilSize';\n            this.props.callbackFromParent(1);\n        }\n        else if (this.props.currentState === 1){\n            tempPath = '/ExpPupilOrientation'\n            this.props.callbackFromParent(2);\n        }\n        else if (this.props.currentState === 2){\n            tempPath = '/Result'\n            this.props.callbackFromParent(3);\n        }\n        else\n            tempPath = 0\n\n        console.log('Video Ended');\n        console.log(this.props.currentState);\n        console.log(tempPath);\n\n        if (tempPath != 0)\n            this.props.history.push(tempPath);\n    }\n\n    render() {\n      return (\n          <div>\n              <video onEnded={this.videoEnded} src={this.getRecording()} width=\"1224\" height=\"768\" controls autoPlay type=\"video/mp4\"></video>\n          </div>\n      );\n    }\n}\n\nexport default PrevResult;","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpSelectApproach.js",["138"],"import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCamera, faCoffee, faImage } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass ExpSelectApproach extends React.Component{\r\n    constructor(props) {\r\n        super()\r\n    }\r\n\r\n    //Transition to the next path/state\r\n    handleClick = (event, path) => {\r\n        this.props.history.push(path);\r\n    }\r\n\r\n    //Trigger parent method exiExp() and return to home-page\r\n    exitExperiment = (event) => {\r\n        this.props.callbackFromParent();\r\n        this.props.history.push('/')\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className= \"jumbotron text-center\"> \r\n                    <div className=\"info-text\">\r\n                        Välj input\r\n                    </div>\r\n                    <div>\r\n                        Epi försöker förstå och uttrycka känslor hon ser i människors ansiktsuttryck.\r\n                    </div>\r\n                    <div>\r\n                        Låt Epi spara en bild av ditt ansikte i minnet (Epi har fotografiskt minne) eller välj en bild åt Epi från galleriet.\r\n                    </div>\r\n                    <div className=\"image-selects\">\r\n                        <div className=\"take\">\r\n                            {/* <FontAwesomeIcon icon={[\"fal\", \"coffee\"]} /> */}\r\n                            <FontAwesomeIcon icon={faCamera} />\r\n                            <button  onClick={(e) => this.handleClick(e, '/ExpTakePicture')} type=\"submit\" className=\"btn btn-primary\">Ta bild</button>\r\n                        </div>\r\n                        <div className=\"choose\">\r\n                            <FontAwesomeIcon icon={faImage}/>\r\n                            <button  onClick={(e) => this.handleClick(e, '/ExpChoosePicture')} type=\"submit\" className=\"btn btn-primary\">Välj bild</button>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <button  onClick={(e) => this.exitExperiment(e, '/')} type=\"submit\" className=\"btn btn-primary\">Tillbaka</button>\r\n                </div>\r\n                \r\n                <div className=\"form-group mt-20\"> </div>\r\n            </div>             \r\n        );\r\n    }\r\n}\r\n\r\nexport default ExpSelectApproach;","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\progress-bar.component.js",[],{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":4,"column":8,"nodeType":"145","messageId":"146","endLine":4,"endColumn":19},{"ruleId":"143","severity":1,"message":"147","line":81,"column":11,"nodeType":"145","messageId":"146","endLine":81,"endColumn":18},{"ruleId":"143","severity":1,"message":"147","line":120,"column":11,"nodeType":"145","messageId":"146","endLine":120,"endColumn":18},{"ruleId":"148","severity":1,"message":"149","line":121,"column":157,"nodeType":"150","messageId":"151","endLine":121,"endColumn":158},{"ruleId":"152","severity":1,"message":"153","line":133,"column":31,"nodeType":"154","messageId":"155","endLine":133,"endColumn":33},{"ruleId":"152","severity":1,"message":"153","line":134,"column":35,"nodeType":"154","messageId":"155","endLine":134,"endColumn":37},{"ruleId":"156","severity":1,"message":"157","line":147,"column":33,"nodeType":"158","messageId":"159","endLine":147,"endColumn":35},{"ruleId":"156","severity":1,"message":"157","line":149,"column":40,"nodeType":"158","messageId":"159","endLine":149,"endColumn":42},{"ruleId":"156","severity":1,"message":"157","line":151,"column":40,"nodeType":"158","messageId":"159","endLine":151,"endColumn":42},{"ruleId":"143","severity":1,"message":"160","line":183,"column":9,"nodeType":"145","messageId":"146","endLine":183,"endColumn":23},{"ruleId":"143","severity":1,"message":"161","line":196,"column":9,"nodeType":"145","messageId":"146","endLine":196,"endColumn":12},{"ruleId":"156","severity":1,"message":"157","line":8,"column":23,"nodeType":"158","messageId":"159","endLine":8,"endColumn":25},{"ruleId":"156","severity":1,"message":"157","line":11,"column":29,"nodeType":"158","messageId":"159","endLine":11,"endColumn":31},{"ruleId":"156","severity":1,"message":"157","line":14,"column":29,"nodeType":"158","messageId":"159","endLine":14,"endColumn":31},{"ruleId":"143","severity":1,"message":"162","line":3,"column":8,"nodeType":"145","messageId":"146","endLine":3,"endColumn":18},{"ruleId":"143","severity":1,"message":"163","line":4,"column":10,"nodeType":"145","messageId":"146","endLine":4,"endColumn":24},{"ruleId":"143","severity":1,"message":"164","line":4,"column":26,"nodeType":"145","messageId":"146","endLine":4,"endColumn":33},{"ruleId":"143","severity":1,"message":"165","line":4,"column":43,"nodeType":"145","messageId":"146","endLine":4,"endColumn":52},{"ruleId":"143","severity":1,"message":"166","line":4,"column":54,"nodeType":"145","messageId":"146","endLine":4,"endColumn":57},{"ruleId":"143","severity":1,"message":"167","line":4,"column":59,"nodeType":"145","messageId":"146","endLine":4,"endColumn":62},{"ruleId":"152","severity":1,"message":"153","line":31,"column":35,"nodeType":"154","messageId":"155","endLine":31,"endColumn":37},{"ruleId":"152","severity":1,"message":"153","line":32,"column":39,"nodeType":"154","messageId":"155","endLine":32,"endColumn":41},{"ruleId":"152","severity":1,"message":"153","line":35,"column":50,"nodeType":"154","messageId":"155","endLine":35,"endColumn":52},{"ruleId":"156","severity":1,"message":"157","line":36,"column":51,"nodeType":"158","messageId":"159","endLine":36,"endColumn":53},{"ruleId":"143","severity":1,"message":"162","line":3,"column":8,"nodeType":"145","messageId":"146","endLine":3,"endColumn":18},{"ruleId":"152","severity":1,"message":"153","line":21,"column":35,"nodeType":"154","messageId":"155","endLine":21,"endColumn":37},{"ruleId":"152","severity":1,"message":"153","line":22,"column":39,"nodeType":"154","messageId":"155","endLine":22,"endColumn":41},{"ruleId":"152","severity":1,"message":"153","line":25,"column":50,"nodeType":"154","messageId":"155","endLine":25,"endColumn":52},{"ruleId":"156","severity":1,"message":"157","line":26,"column":51,"nodeType":"158","messageId":"159","endLine":26,"endColumn":53},{"ruleId":"168","severity":1,"message":"169","line":164,"column":37,"nodeType":"170","endLine":164,"endColumn":65},{"ruleId":"171","severity":1,"message":"172","line":132,"column":1,"nodeType":"173","endLine":134,"endColumn":2},{"ruleId":"143","severity":1,"message":"162","line":3,"column":8,"nodeType":"145","messageId":"146","endLine":3,"endColumn":18},{"ruleId":"152","severity":1,"message":"153","line":21,"column":35,"nodeType":"154","messageId":"155","endLine":21,"endColumn":37},{"ruleId":"152","severity":1,"message":"153","line":22,"column":39,"nodeType":"154","messageId":"155","endLine":22,"endColumn":41},{"ruleId":"152","severity":1,"message":"153","line":25,"column":50,"nodeType":"154","messageId":"155","endLine":25,"endColumn":52},{"ruleId":"156","severity":1,"message":"157","line":26,"column":51,"nodeType":"158","messageId":"159","endLine":26,"endColumn":53},{"ruleId":"143","severity":1,"message":"174","line":3,"column":8,"nodeType":"145","messageId":"146","endLine":3,"endColumn":19},{"ruleId":"143","severity":1,"message":"175","line":4,"column":8,"nodeType":"145","messageId":"146","endLine":4,"endColumn":16},{"ruleId":"143","severity":1,"message":"176","line":7,"column":8,"nodeType":"145","messageId":"146","endLine":7,"endColumn":16},{"ruleId":"143","severity":1,"message":"177","line":28,"column":9,"nodeType":"145","messageId":"146","endLine":28,"endColumn":19},{"ruleId":"143","severity":1,"message":"178","line":32,"column":9,"nodeType":"145","messageId":"146","endLine":32,"endColumn":23},{"ruleId":"168","severity":1,"message":"169","line":109,"column":21,"nodeType":"170","endLine":109,"endColumn":78},{"ruleId":"143","severity":1,"message":"179","line":129,"column":21,"nodeType":"145","messageId":"146","endLine":129,"endColumn":24},{"ruleId":"143","severity":1,"message":"179","line":137,"column":21,"nodeType":"145","messageId":"146","endLine":137,"endColumn":24},{"ruleId":"143","severity":1,"message":"179","line":143,"column":21,"nodeType":"145","messageId":"146","endLine":143,"endColumn":24},{"ruleId":"168","severity":1,"message":"169","line":155,"column":25,"nodeType":"170","endLine":155,"endColumn":108},{"ruleId":"168","severity":1,"message":"169","line":169,"column":25,"nodeType":"170","endLine":169,"endColumn":108},{"ruleId":"168","severity":1,"message":"169","line":183,"column":25,"nodeType":"170","endLine":183,"endColumn":108},{"ruleId":"143","severity":1,"message":"180","line":4,"column":8,"nodeType":"145","messageId":"146","endLine":4,"endColumn":15},{"ruleId":"143","severity":1,"message":"181","line":21,"column":7,"nodeType":"145","messageId":"146","endLine":21,"endColumn":20},{"ruleId":"143","severity":1,"message":"182","line":25,"column":7,"nodeType":"145","messageId":"146","endLine":25,"endColumn":14},{"ruleId":"168","severity":1,"message":"169","line":100,"column":21,"nodeType":"170","endLine":100,"endColumn":92},{"ruleId":"143","severity":1,"message":"183","line":4,"column":8,"nodeType":"145","messageId":"146","endLine":4,"endColumn":11},{"ruleId":"156","severity":1,"message":"184","line":86,"column":22,"nodeType":"158","messageId":"159","endLine":86,"endColumn":24},{"ruleId":"143","severity":1,"message":"185","line":3,"column":20,"nodeType":"145","messageId":"146","endLine":3,"endColumn":28},"no-native-reassign",["186"],"no-negated-in-lhs",["187"],"no-unused-vars","'robot_image' is defined but never used.","Identifier","unusedVar","'mapRows' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'currentEmotion' is defined but never used.","'val' is assigned a value but never used.","'profilePic' is defined but never used.","'OverlayTrigger' is defined but never used.","'Tooltip' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'ExpEyeColor' is defined but never used.","'Progress' is defined but never used.","'ai_image' is defined but never used.","'imageStyle' is assigned a value but never used.","'divInlineBlock' is assigned a value but never used.","'key' is assigned a value but never used.","'Spinner' is defined but never used.","'loaderWrapper' is assigned a value but never used.","'spinner' is assigned a value but never used.","'vid' is defined but never used.","Expected '!==' and instead saw '!='.","'faCoffee' is defined but never used.","no-global-assign","no-unsafe-negation"]