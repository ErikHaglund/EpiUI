[{"C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\index.js":"1","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\App.js":"2","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\serviceWorker.js":"3","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpObject.js":"4","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpEyeColor.js":"5","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\EmotionObject.js":"6","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpPupilOrientation.js":"7","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpChoosePicture.js":"8","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpMain.js":"9","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpObjectData.js":"10","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpTakePicture.js":"11","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpPupilSize.js":"12","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\Result.js":"13","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpPreGameInstruction.js":"14","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\PrevResult.js":"15","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpSelectApproach.js":"16","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\progress-bar.component.js":"17","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\Summary.js":"18"},{"size":635,"mtime":1605204979458,"results":"19","hashOfConfig":"20"},{"size":12378,"mtime":1607955148547,"results":"21","hashOfConfig":"20"},{"size":5086,"mtime":1602781426000,"results":"22","hashOfConfig":"20"},{"size":504,"mtime":1604943342002,"results":"23","hashOfConfig":"20"},{"size":4996,"mtime":1607776551718,"results":"24","hashOfConfig":"20"},{"size":749,"mtime":1607097378906,"results":"25","hashOfConfig":"20"},{"size":4318,"mtime":1606376756256,"results":"26","hashOfConfig":"20"},{"size":5054,"mtime":1606472119969,"results":"27","hashOfConfig":"20"},{"size":1896,"mtime":1608220332282,"results":"28","hashOfConfig":"20"},{"size":3467,"mtime":1608212439033,"results":"29","hashOfConfig":"20"},{"size":1190,"mtime":1607613973799,"results":"30","hashOfConfig":"20"},{"size":3091,"mtime":1607614030461,"results":"31","hashOfConfig":"20"},{"size":5992,"mtime":1608219356418,"results":"32","hashOfConfig":"20"},{"size":5052,"mtime":1608234603294,"results":"33","hashOfConfig":"20"},{"size":2940,"mtime":1607696372019,"results":"34","hashOfConfig":"20"},{"size":2066,"mtime":1608220607528,"results":"35","hashOfConfig":"20"},{"size":960,"mtime":1607420774469,"results":"36","hashOfConfig":"20"},{"size":2848,"mtime":1608219789369,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"sx7vzg",{"filePath":"41","messages":"42","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\index.js",[],["82","83"],"C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\App.js",["84","85","86","87","88","89","90","91","92","93"],"import React from 'react';\nimport {BrowserRouter as Router, Route, Redirect} from \"react-router-dom\";\nimport {Switch} from \"react-router-dom\";\nimport robot_image from './images/robot_illu3.png';\nimport './App.css';\nimport EmotionObject from './EmotionObject';\nimport ExpObject from './ExpObject';\nimport ExpEyeColor from './ExpEyeColor';\nimport ExpPupilSize from './ExpPupilSize';\nimport ExpPupilOrientation from './ExpPupilOrientation';\nimport {objectList} from './ExpObjectData';\nimport ExpMain from './ExpMain';\nimport PrevResult from './PrevResult';\nimport Result from './Result';\nimport Summary from './Summary';\nimport ExpChoosePicture from './ExpChoosePicture';\nimport ExpPreGameInstruction from './ExpPreGameInstruction';\nimport ExpTakePicture from './ExpTakePicture';\nimport ExpSelectApproach from './ExpSelectApproach';\n\n// import * as faceapi from 'face-api.js';\n\n//expObject will hold the result of all the different views/state\n//emotionsObject will store the importen emotionsObject\n//emotionDisplay will store the emotion category acting as basis for the interaction\n//counter only necessary if DB\n//currentState will keep track on the view/state\n\nclass App extends React.Component{\n  constructor(props) {\n    super();\n    this.state = {expObject : [], emotionsObject : [], emotionDisplay: '', counter : 1, currentState: 0, selectedImage: '', faceRecEmotions: {}, currentEmotion: {}, guessResults: []};\n    this.faceRec = this.faceRec.bind(this)\n  }\n\n  faceRec(imgSrc) {\n     this.setState({selectedImage: imgSrc});\n  }\n\n  //Application mount and the emotionObjects is imported and set this.state (emotionsObject)\n  componentDidMount() {\n    let emotionsObject = new EmotionObject();\n    const data = objectList;\n    const mapRows = data.map(emotion => (\n          emotionsObject.addEmotion(emotion.id, emotion.emotionCat, emotion.emotions, emotion.boolean, emotion.value, emotion.faceRecEmotion, emotion.barColor, emotion.resultImages)\n    ));\n\n    //set list of emotions, select on at random and remove it from the original list so that it\n    //wont be chosen again.\n    var emotionsList = [...objectList];\n    var emotion = emotionsList[Math.floor(Math.random() * emotionsList.length)];\n    emotionsList.splice(emotionsList.indexOf(emotion), 1);\n    \n    var guessResults = [{selectedImage: '', faceRecEmotions: {}, epiEmotion: {}, guesses: []}] //guesses = tempExp?\n\n    this.setState({emotionsObject: emotionsObject.emotionsObject, currentEmotion: emotion, emotionsList: emotionsList, guessResults: guessResults});\n  }\n\n  initData = () =>{\n    \n  }\n\n  //skall anropas frÃ¥n resultatlistan\n  setNewEmotion = () =>{\n\n    let newExpObject = new ExpObject();\n    const data = this.state.emotionsObject;\n    const mapRows = data.map(emotion => (\n          newExpObject.addEmotionObject(1, ({id: emotion.id, emotionCat: emotion.emotionCat, boolean: emotion.boolean, value: emotion.value, emotions: []}))\n    ));\n\n\n    var emotionsList = [...this.state.emotionsList];\n    console.log('setNewEmotion emotionsList');\n    console.log(emotionsList);\n    var emotion = emotionsList[Math.floor(Math.random() * emotionsList.length)];\n    console.log('setNewEmotion emotion');\n    console.log(emotion);\n    emotionsList.splice(emotionsList.indexOf(emotion), 1);\n\n    var guessResults = [...this.state.guessResults];\n    guessResults.push({selectedImage: '', faceRecEmotions: {}, epiEmotion: {}, guesses: []});\n\n    this.setState({expObject: newExpObject.expObject, emotionsObject: this.state.emotionsObject, faceRecEmotions: {}, currentEmotion: emotion, emotionsList: emotionsList, guessResults: guessResults});\n\n    // console.log(this.state);\n\n  }\n\n  //Trigger an Image from IKAROS and the response is converted to json if the repsonse is to be used\n  takePicture = () => {\n    fetch('http://192.168.1.140:8000/control/ImageTrigger.data/0/0/1', {\n        method: 'POST',\n        mode: 'CORS',\n        body: ' ',\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }).then(res => {\n        return res;\n    }).catch(err => console.log(err));\n    // fetch('http://192.168.1.140:8000/control/ImageTrigger.data/0/0/1')\n    //     .then(response => response.json());\n    // fetch('http://192.168.1.140:8000/control/ImageTrigger.data/0/0/0')\n    //     .then(response => response.json());\n  }\n\n  getPicture = () => {\n\n  }\n\n  playEmotion = () => {\n    fetch('http://127.0.0.1:8000/control/MotionTrigger.data/0/0/1 ')\n        .then(response => response.json());\n  }\n\n  //Start experiment -> create an ExpObject, generate a random number to be chosen as basis for the interaction\n  // the random number represent an emotion category. Set this.state (expObject and emotionDisplay)\n  // in this method if DB were to used the counter would also be increased\n  startExp = () => {\n    let newExpObject = new ExpObject();\n    const data = this.state.emotionsObject;\n    const mapRows = data.map(emotion => (\n          newExpObject.addEmotionObject(1, ({id: emotion.id, emotionCat: emotion.emotionCat, boolean: emotion.boolean, value: emotion.value, emotions: []}))\n    ));\n\n    let randomEmotion = Math.floor((Math.random() * objectList.length ) + 1);\n    this.setState({expObject: newExpObject.expObject, emotionDisplay:  randomEmotion});\n  }\n\n  //Change the current state and reset all emotions chosen by click\n  changeCurrentState = (stateValue) => {\n    let tempEmotionsObj = [...this.state.emotionsObject];\n    tempEmotionsObj.map(emObj =>{\n        emObj.emotions.map(emotion=>{\n            if (emotion.boolean){\n                emotion.boolean = !emotion.boolean;\n            }\n        })\n    })\n    this.setState({currentState : stateValue, emotionsObject : tempEmotionsObj, faceRecEmotions: this.state.faceRecEmotions});\n  }\n\n  //Update the current experiment-state and set this.state\n  updateExp = (expNumberObject, selectedEmotion) => {\n    let tempExp = [...this.state.expObject];\n    if (this.state.currentState == 0){\n      tempExp[this.state.currentState].expOne = expNumberObject;\n    }// else if (this.state.currentState == 1){\n    //     tempExp[this.state.currentState].expTwo = expNumberObject;\n    // } else if (this.state.currentState == 2){\n    //     tempExp[this.state.currentState].expThree = expNumberObject;\n    // }\n\n    var guessResults = [...this.state.guessResults];\n\n\n    console.log(guessResults);\n    console.log(guessResults[guessResults.length -1].guesses);\n    console.log(selectedEmotion);\n\n    // var selectedGuess = expNumberObject.filter(obj => {\n    //   return obj.value > 0\n    // })    \n    // console.log(selectedGuess);\n\n    // guessResults[guessResults.length -1].guess = selectedGuess[0]; //ev Ã¤ndra om man skall kunna gissa pÃ¥ flera\n    selectedEmotion.boolean ? guessResults[guessResults.length -1].guesses.push(selectedEmotion) : guessResults[guessResults.length -1].guesses.splice(guessResults[guessResults.length -1].guesses.indexOf(selectedEmotion), 1);\n\n    this.setState(prevState => ({\n        expObject: tempExp,\n        emotionsObject : this.state.emotionsObject, \n        faceRecEmotions: this.state.faceRecEmotions,\n        guessResults: guessResults\n      }))\n   }\n\n  setFaceRecEmotions = (emotions) => {\n    var guessResults = [...this.state.guessResults];\n    guessResults[guessResults.length -1].faceRecEmotions = emotions;\n    guessResults[guessResults.length -1].selectedImage = this.state.selectedImage;\n    guessResults[guessResults.length -1].epiEmotion = this.state.currentEmotion;\n\n    if(Object.keys(this.state.faceRecEmotions).length === 0)\n      this.setState({expObject : this.state.expObject, \n                     emotionsObject : this.state.emotionsObject, \n                     faceRecEmotions: emotions,\n                     guessResults: guessResults});\n\n    console.log(this.state);\n  }\n\n  //If exit from experiment -> clear the states. If DB were to be used you would need to handle it in this method\n  exitExp = () => {\n    // this.setState({expObject : [], emotionDisplay: '', counter : 1, currentState: 0});\n    this.setState({emotionsObject: {}, currentEmotion: {}, emotionsList: [], guessResults: []});\n    console.log(this.state);\n  };\n\n  render() {\n    let emotions = this.state.emotionsObject;\n    let emDisplay = this.state.emotionDisplay;\n    let stateValue = this.state.currentState;\n    let experiment = this.state.expObject;\n    let selectedImage = this.state.selectedImage;\n    let faceRecEmotions = this.state.faceRecEmotions;\n  //let landmarks = this.state.landmarks; // kolla om anvÃ¤nds, annars ta bort\n//this.setState({emotionsObject: emotionsObject.emotionsObject, currentEmotion: emotion, emotionsList: emotionsList});\n\n    let currentEmotion = this.state.currentEmotion;\n    let guessResults = this.state.guessResults;\n    \n    const expEyeColorElem = (params) => <ExpEyeColor {...params} expObject={experiment} emotionsObject={emotions} currentState={stateValue} emotionDisplay={emDisplay} callbackFromParent={this.updateExp} callbackFromParentExit={this.exitExp}/>;\n    // const expPupilSizeElem = (params) => <ExpPupilSize {...params} expObject={experiment} emotionsObject={emotions} currentState={stateValue} emotionDisplay={emDisplay} callbackFromParent={this.updateExp} callbackFromParentExit={this.exitExp}/>;\n    // const expPupilOrientationElem = (params) => <ExpPupilOrientation {...params} expObject={experiment} emotionsObject={emotions} currentState={stateValue} emotionDisplay={emDisplay} callbackFromParent={this.updateExp} callbackFromParentExit={this.exitExp}/>;\n    const prevResultElem = (params) => <PrevResult {...params} currentState={stateValue} faceRecEmotions = {faceRecEmotions} currentEmotion = {currentEmotion} callbackFromParent={this.changeCurrentState}/>;\n    const resultElem = (params) => <Result {...params} expObject={experiment} faceRecEmotions = {faceRecEmotions} selectedImage={selectedImage} emotionsObject={emotions} guessResults={guessResults} callbackSetNewEmotion={this.setNewEmotion} callbackFromParent={this.exitExp}/>;\n    const summaryElem = (params) => <Summary {...params} guessResults={guessResults} callbackFromParent={this.exitExp}/>;\n    const expMainElem = (params) => <ExpMain {...params}  callbackFromParent={this.startExp}/>;\n    const expSelectApproachElem = (params) => <ExpSelectApproach {...params}  callbackFromParent={this.exitExp}/>;\n    const expChoosePictureElem = (params) => <ExpChoosePicture {...params}  callbackFromParent={this.faceRec}/>;\n    const expTakePictureElem = (params) => <ExpTakePicture {...params}  callbackFromParent={this.takePicture}/>;\n    const expPreGameInstructionElem = (params) => <ExpPreGameInstruction {...params} selectedImage={selectedImage} callbackFromParent={this.setFaceRecEmotions}/>;\n\n    let val = JSON.stringify(this.state.expObject);\n\n        return (\n          <Router>\n            <div>\n              {/* <div className=\"jumbotron text-center\" style={{backgroundColor: 'white'}}>\n                <img src={robot_image} />\n                <spam>{val}</spam>\n                <div className=\"jumbotron text-center\" style={{backgroundColor: 'white'}}>\n              </div>\n              </div> */}              \n                <div className=\"form-group mt-20\"> \n                  <Switch>\n                    <Route exact path=\"/\">\n                      <Redirect to=\"/ExpMain\" />\n                    </Route>\n                    <Route path='/ExpChoosePicture' component = {expChoosePictureElem}/>\n                    <Route path='/ExpSelectApproach' component = {expSelectApproachElem}/>\n                    <Route path='/ExpPreGameInstruction' component = {expPreGameInstructionElem}/>\n                    <Route path='/ExpTakePicture' component = {expTakePictureElem}/>\n                    <Route path='/ExpMain' component = {expMainElem}/>\n                    <Route path='/ExpEyeColor' component={expEyeColorElem}/>\n                    {/* <Route path='/ExpPupilSize' component={expPupilSizeElem}/>\n                    <Route path='/ExpPupilOrientation' component={expPupilOrientationElem}/> */}\n                    <Route path='/PrevResult' component={prevResultElem}/>\n                    <Route path='/Result' component={resultElem}/>\n                    <Route path='/Summary' component={summaryElem}/>\n                  </Switch>\n                </div>\n            </div>\n          </Router>\n      );    \n  } \n}\n\nexport default App;","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\serviceWorker.js",[],"C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpObject.js",["94","95","96"],"class ExpObject{\n    constructor() {\n        this.expObject = [{expOne: []}, {expTwo: []}, {expThree: []}];\n        \n    }\n    \n    addEmotionObject(expNumber, emotionObject){\n        if (expNumber == 1){\n            this.expObject[0].expOne.push(emotionObject);\n\n        }else if (expNumber == 2){\n            this.expObject[1].expTwo.push(emotionObject);\n\n        }else if (expNumber == 3){\n            this.expObject[2].expThree.push(emotionObject);\n\n        }\n    }\n     \n}\n\nexport default ExpObject;","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpEyeColor.js",["97","98","99","100","101","102","103","104","105","106","107"],"import React from 'react';\r\nimport ai_image from './images/abstract_ai.jpg';\r\nimport profilePic from './images/profilePic.jpg';\r\nimport { OverlayTrigger, Tooltip, Button, Container, Row, Col } from 'react-bootstrap';\r\n\r\nlet selectedCount = 0;\r\n\r\nclass ExpEyeColor extends React.Component{\r\n    constructor(props) {\r\n        super();\r\n    }\r\n\r\n    componentDidMount() {\r\n        selectedCount = 0;\r\n    }\r\n    \r\n\r\n    disableButton = () => {\r\n        // if(selectedCount <= 0 || selectedCount > 5)\r\n        console.log(selectedCount);\r\n        if(selectedCount != 1)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    //Transition to the next path/state\r\n    handleClick = (event, path) => {\r\n        this.props.history.push(path);\r\n    }\r\n\r\n    //If any emotion is chosen it will directly update the expObject param in this.state received from parent\r\n    //Trigger parent method UpdateExp()\r\n    //increasing the emotion category chosen by one\r\n    handleEmotionChange = (emotion, emotionId) => {\r\n        console.log(emotion);\r\n        // console.log(emotionId);\r\n        // console.log(this.props.emotionsObject);\r\n        // console.log(this.props.expObject);\r\n        let tempEmotionsObj = [...this.props.emotionsObject];\r\n        let tempExpObject = [...this.props.expObject[0].expOne];\r\n        tempEmotionsObj.map(emObj =>{\r\n            emObj.emotions.map(emotion=>{\r\n                if (emotion.id === emotionId){\r\n                    emotion.boolean = !emotion.boolean;\r\n                    tempExpObject.map(expEmotion =>{\r\n                        if (expEmotion.emotionCat == emObj.emotionCat){\r\n                            emotion.boolean ? expEmotion.value += 1 : expEmotion.value -= 1;\r\n                            emotion.boolean ? selectedCount += 1 : selectedCount -= 1;\r\n                            this.props.callbackFromParent(tempExpObject, emotion);\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    //Simply render the different emotionsObject received from the parent\r\n    renderItems = () => {\r\n        const data = this.props.emotionsObject;\r\n        const mapRows = data.map(emotionObj => (\r\n            emotionObj.emotions.map(emotion => (\r\n                <React.Fragment key = {emotion.id}>\r\n                    <button\r\n                    onClick={() => this.handleEmotionChange(emotion, emotion.id)}\r\n                    className={emotion.boolean ? 'btn btn-light btn-rounded selected' : 'btn btn-light btn-rounded deselected'}\r\n                    value = {emotion.id}>\r\n                        {emotion.emotion}\r\n                    </button>\r\n                </React.Fragment>\r\n            ))\r\n        ));\r\n        return mapRows;\r\n      };\r\n\r\n    //Trigger parent method exiExp() and return to home-page\r\n    exitExperiment = (event) => {\r\n        this.props.callbackFromParentExit();\r\n        this.props.history.push('/')\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // <Container>\r\n            //     <Row>\r\n            //         <Col xs={2}><img src={profilePic}/></Col>\r\n            //         <Col xs={7}>\r\n            //             <div  className=\"p-3 mb-2 bg-info text-white\" style={{backgroundImage: `url(${ai_image}` }}>\r\n            //                 <div required  multiple={true} id=\"emotionSelect\"  type=\"button\"  onClick={(e) => this.handleEmotionChange(e)}>\r\n            //                     {this.renderItems()}\r\n            //                 </div>\r\n            //             </div>\r\n            //         </Col>\r\n            //         <Col xs={1}>\r\n            //             <div className=\"\">\r\n            //                 <button  onClick={(e) => this.exitExperiment(e)} type=\"submit\" className=\"btn btn-danger\">Avbryt</button>\r\n            //                 <button  onClick={(e) => this.handleClick(e, '/PrevResult')} type=\"submit\" className=\"btn btn-success\">NÃ¤sta</button>\r\n            //             </div>\r\n            //         </Col>\r\n            //     </Row>\r\n            // </Container>\r\n            <div className=\"experiment-wrapper\" style={{backgroundImage: `url(${ai_image}` }}>\r\n                <div className=\"experiment-buttons\">\r\n                    <button onClick={(e) => this.exitExperiment(e)} type=\"submit\" className=\"btn btn-danger\">Avbryt</button>\r\n                    <Button disabled={this.disableButton()} onClick={(e) => this.handleClick(e, '/Result')} type=\"submit\" className=\"btn btn-success button-next\">NÃ¤sta</Button>\r\n                </div>\r\n                <div  className=\"experiment-options\" >\r\n                    <div onClick={(e) => this.handleEmotionChange(e)}>\r\n                        {this.renderItems()}\r\n                    </div>\r\n                </div>\r\n                {/* <div className=\"experiment-image\">\r\n                    <img src={this.props.selectedImage}/>\r\n                </div> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExpEyeColor;","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\EmotionObject.js",[],"C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpPupilOrientation.js",["108","109","110","111","112"],"import React from 'react';\r\nimport ai_image from './images/abstract_ai.jpg';\r\nimport profilePic from './images/profilePic.jpg';\r\n\r\nclass ExpPupilOrientation extends React.Component{\r\n    constructor(props) {\r\n        super();\r\n    }\r\n\r\n    //Transition to the next path/state\r\n    handleClick = (event, path) => {\r\n        this.props.history.push(path);\r\n    }\r\n\r\n    //If any emotion is chosen it will directly update the expObject param in this.state received from parent\r\n    //Trigger parent method UpdateExp()\r\n    //increasing the emotion category chosen by one\r\n    handleEmotionChange = (emotionId) => {\r\n        let tempEmotionsObj = [...this.props.emotionsObject];\r\n        let tempExpObject = [...this.props.expObject[this.props.currentState].expThree];\r\n        tempEmotionsObj.map(emObj =>{\r\n            emObj.emotions.map(emotion=>{\r\n                if (emotion.id === emotionId){\r\n                    emotion.boolean = !emotion.boolean;\r\n                    tempExpObject.map(expEmotion =>{\r\n                        if (expEmotion.emotionCat == emObj.emotionCat){\r\n                            emotion.boolean ? expEmotion.value += 1 : expEmotion.value -= 1;\r\n                            this.props.callbackFromParent(tempExpObject);\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    //Simply render the different emotionsObject received from the parent\r\n    renderItems = () => {\r\n        const data = this.props.emotionsObject;\r\n        const mapRows = data.map(emotionObj => (\r\n            emotionObj.emotions.map(emotion => (\r\n                <React.Fragment key = {emotion.id}>\r\n                    <button\r\n                    onClick={() => this.handleEmotionChange(emotion.id)}\r\n                    className={emotion.boolean ? 'btn btn-light btn-rounded selected' : 'btn btn-light btn-rounded deselected'}\r\n                    value = {emotion.id}>\r\n                        {emotion.emotion}\r\n                    </button>\r\n                </React.Fragment>\r\n            ))\r\n        ));\r\n        return mapRows;\r\n      };\r\n    \r\n    //Trigger parent method exiExp() and return to home-page\r\n    exitExperiment = (event) => {\r\n        this.props.callbackFromParentExit();\r\n        this.props.history.push('/')\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // <Container>\r\n            //     <Row>\r\n            //         <Col xs={2}><img src={profilePic}/></Col>\r\n            //         <Col xs={7}>\r\n            //             <div  className=\"p-3 mb-2 bg-info text-white\" style={{backgroundImage: `url(${ai_image}` }}>\r\n            //                 <div required  multiple={true} id=\"emotionSelect\"  type=\"button\"  onClick={(e) => this.handleEmotionChange(e)}>\r\n            //                     {this.renderItems()}\r\n            //                 </div>\r\n            //             </div>\r\n            //         </Col>\r\n            //         <Col xs={1}>\r\n            //             <div className=\"\">\r\n            //                 <button  onClick={(e) => this.exitExperiment(e)} type=\"submit\" className=\"btn btn-danger\">Avbryt</button>\r\n            //                 <button  onClick={(e) => this.handleClick(e, '/PrevResult')} type=\"submit\" className=\"btn btn-success\">NÃ¤sta</button>\r\n            //             </div>\r\n            //         </Col>\r\n            //     </Row>\r\n            // </Container>\r\n            <div className=\"experiment-wrapper\" style={{backgroundImage: `url(${ai_image}` }}>\r\n                <div className=\"experiment-buttons\">\r\n                    <button  onClick={(e) => this.exitExperiment(e)} type=\"submit\" className=\"btn btn-danger\">Avbryt</button>\r\n                    <button  onClick={(e) => this.handleClick(e, '/PrevResult')} type=\"submit\" className=\"btn btn-success button-next\">NÃ¤sta</button>\r\n                </div>\r\n                <div  className=\"experiment-options\" >\r\n                    <div onClick={(e) => this.handleEmotionChange(e)}>\r\n                        {this.renderItems()}\r\n                    </div>\r\n                </div>\r\n                {/* <div className=\"experiment-image\">\r\n                    <img src={this.props.selectedImage}/>\r\n                </div> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExpPupilOrientation;","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpChoosePicture.js",["113"],"import React from 'react';\r\n// import ImageGallery from 'react-image-gallery';\r\n// import \"react-image-gallery/styles/css/image-gallery.css\";\r\nimport {Carousel} from 'react-responsive-carousel';\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\nimport $ from 'jquery';\r\n\r\nconst images = [\r\n    {\r\n        id: 1436436,\r\n        original: '/images/EpiImage.jpg',\r\n        thumbnail: '/images/EpiImage.jpg',\r\n      },\r\n      {\r\n        id: 164363,\r\n        original: '/images/EpiImage2.jpg',\r\n        thumbnail: '/images/EpiImage2.jpg',\r\n      },\r\n      {\r\n        id: 1344,\r\n        original: '/images/EpiImage3.jpg',\r\n        thumbnail: '/images/EpiImage.jpg',\r\n      },\r\n      {\r\n        id: 1456,\r\n        original: '/images/EpiImage4.jpg',\r\n        thumbnail: '/images/EpiImage4.jpg',\r\n      },\r\n      {\r\n        id: 1345,\r\n        original: '/images/EpiImage5.jpg',\r\n        thumbnail: '/images/EpiImage5.jpg',\r\n      },\r\n      {\r\n        id: 145,\r\n        original: '/images/EpiImage.jpg',\r\n        thumbnail: '/images/EpiImage6.jpg',\r\n      },\r\n    {\r\n      id: 1,\r\n      original: '/images/anger1.jpg',\r\n      thumbnail: '/images/anger1.jpg',\r\n    },\r\n    {\r\n      id: 2,\r\n      original: '/images/anger2.jpg',\r\n      thumbnail: '/images/anger2.jpg',\r\n    //   legend: 'bild 2',\r\n    },\r\n    {\r\n        id: 3,\r\n        original: '/images/anger3.jpg',\r\n        thumbnail: '/images/anger3.jpg',\r\n    },\r\n    {\r\n        id: 4,\r\n        original: '/images/anger4.jpg',\r\n        thumbnail: '/images/anger4.jpg',\r\n    },\r\n    {\r\n        id: 5,\r\n        original: '/images/stock_disgusted2.jpg',\r\n        thumbnail: '/images/stock_disgusted2.jpg',\r\n    },\r\n    {\r\n        id: 6,\r\n        original: '/images/disgust1.jpg',\r\n        thumbnail: '/images/disgust1.jpg',\r\n    },\r\n    {\r\n        id: 7,\r\n        original: '/images/disgust2.jpg',\r\n        thumbnail: '/images/disgust2.jpg',\r\n    },\r\n    {\r\n        id: 8,\r\n        original: '/images/disgust4.jpg',\r\n        thumbnail: '/images/disgust4.jpg',\r\n    },\r\n    {\r\n        id: 9,\r\n        original: '/images/fear1.jpg',\r\n        thumbnail: '/images/fear1.jpg',\r\n    },\r\n    {\r\n        id: 10,\r\n        original: '/images/fear2.jpg',\r\n        thumbnail: '/images/fear2.jpg',\r\n    },\r\n    {\r\n        id: 12,\r\n        original: '/images/joy2.jpg',\r\n        thumbnail: '/images/joy2.jpg',\r\n        legend: 'joy2',\r\n    },\r\n    {\r\n        id: 13,\r\n        original: '/images/joy3.jpg',\r\n        thumbnail: '/images/joy3.jpg',\r\n    },\r\n    {\r\n        id: 14,\r\n        original: '/images/joy4.jpg',\r\n        thumbnail: '/images/joy4.jpg',\r\n    },\r\n    {\r\n        id: 15,\r\n        original: '/images/sad1.jpg',\r\n        thumbnail: '/images/sad1.jpg',\r\n    },\r\n    {\r\n        id: 16,\r\n        original: '/images/sad2.jpg',\r\n        thumbnail: '/images/sad2.jpg',\r\n    },\r\n    {\r\n        id: 16,\r\n        original: '/images/surprise1.jpg',\r\n        thumbnail: '/images/surprise1.jpg',\r\n    },\r\n    {\r\n        id: 16,\r\n        original: '/images/surprise2.jpg',\r\n        thumbnail: '/images/surprise2.jpg',\r\n    },\r\n    {\r\n        id: 16,\r\n        original: '/images/surprise3.jpg',\r\n        thumbnail: '/images/surprise3.jpg',\r\n    },\r\n  ];\r\n\r\nclass ExpChoosePicture extends React.Component{\r\n    constructor(props) {\r\n        super()\r\n    }\r\n\r\n    //Transition to the next path/state\r\n    handleClick = (event, path) => {\r\n        this.props.history.push(path);\r\n    }\r\n\r\n    clickedThisBitch = (id) => {\r\n        console.log(\"clickedThisBitch\" + id);\r\n    }\r\n\r\n    choosePicture = (event) => {\r\n        let image = $('.selected img').attr('src');\r\n        console.log(image);\r\n        this.props.callbackFromParent(image); //pass image\r\n        this.handleClick(event, '/ExpPreGameInstruction')\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"CarouselWrapper\">\r\n                    <Carousel swipeable={true} showArrows={true}>\r\n                        {images.map((image, index) => {\r\n                            return <div\r\n                                        onClick={() => this.clickedThisBitch(image.id)}\r\n                                        key={image.id}\r\n                                    >\r\n                                    <img src={image.original} />\r\n                                    <p className=\"legend\">{image.legend}</p>\r\n                                    </div>\r\n                            })\r\n                        }\r\n                    </Carousel>\r\n                </div>\r\n                {/* Removed class jumbotron */}\r\n                <div className= \"text-center\"> \r\n                    <button  onClick={(e) => this.handleClick(e, '/ExpSelectApproach')} type=\"submit\" className=\"btn btn-primary\">Tillbaka</button>\r\n                    <button  onClick={(e) => this.choosePicture(e)} type=\"submit\" className=\"btn btn-primary\">NÃ¤sta</button>\r\n                </div>\r\n                <div className=\"form-group mt-20\"></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExpChoosePicture;","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpMain.js",[],"C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpObjectData.js",["114"],"C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpTakePicture.js",[],"C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpPupilSize.js",["115","116","117","118","119"],"import React from 'react';\r\nimport ai_image from './images/abstract_ai.jpg'\r\nimport profilePic from './images/profilePic.jpg';\r\n\r\nclass ExpPupilSize extends React.Component{\r\n    constructor(props) {\r\n        super();\r\n    }\r\n\r\n    //Transition to the next path/state\r\n    handleClick = (event, path) => {\r\n        this.props.history.push(path);\r\n    }\r\n\r\n    //If any emotion is chosen it will directly update the expObject param in this.state received from parent\r\n    //Trigger parent method UpdateExp()\r\n    //increasing the emotion category chosen by one\r\n    handleEmotionChange = (emotionId) => {\r\n        let tempEmotionsObj = [...this.props.emotionsObject];\r\n        let tempExpObject = [...this.props.expObject[this.props.currentState].expTwo];\r\n        tempEmotionsObj.map(emObj =>{\r\n            emObj.emotions.map(emotion=>{\r\n                if (emotion.id === emotionId){\r\n                    emotion.boolean = !emotion.boolean;\r\n                    tempExpObject.map(expEmotion =>{\r\n                        if (expEmotion.emotionCat == emObj.emotionCat){\r\n                            emotion.boolean ? expEmotion.value += 1 : expEmotion.value -= 1;\r\n                            this.props.callbackFromParent(tempExpObject);\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    //Simply render the different emotionsObject received from the parent\r\n    renderItems = () => {\r\n        const data = this.props.emotionsObject;\r\n        const mapRows = data.map(emotionObj => (\r\n            emotionObj.emotions.map(emotion => (\r\n                <React.Fragment key = {emotion.id}>\r\n                    <button\r\n                    onClick={() => this.handleEmotionChange(emotion.id)}\r\n                    className={emotion.boolean ? 'btn btn-light btn-rounded selected' : 'btn btn-light btn-rounded deselected'}\r\n                    value = {emotion.id}>\r\n                        {emotion.emotion}\r\n                    </button>\r\n                </React.Fragment>\r\n            ))\r\n        ));\r\n        return mapRows;\r\n      };\r\n    \r\n    //Trigger parent method exiExp() and return to home-page\r\n    exitExperiment = (event) => {\r\n        this.props.callbackFromParentExit();\r\n        this.props.history.push('/')\r\n    }\r\n\r\n    render() {\r\n        return (            \r\n            <div className=\"experiment-wrapper\" style={{backgroundImage: `url(${ai_image}` }}>\r\n                <div className=\"experiment-buttons\">\r\n                    <button  onClick={(e) => this.exitExperiment(e)} type=\"submit\" className=\"btn btn-danger\">Avbryt</button>\r\n                    <button  onClick={(e) => this.handleClick(e, '/PrevResult')} type=\"submit\" className=\"btn btn-success button-next\">NÃ¤sta</button>\r\n                </div>\r\n                <div  className=\"experiment-options\" >\r\n                    <div onClick={(e) => this.handleEmotionChange(e)}>\r\n                        {this.renderItems()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExpPupilSize;","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\Result.js",["120","121","122","123","124","125","126","127","128","129","130"],"C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpPreGameInstruction.js",["131","132","133","134"],"C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\PrevResult.js",["135","136","137"],"import React from 'react';\n// import ReactWordcloud from 'react-wordcloud';\nimport {objectList} from './ExpObjectData';\nimport vid from './videos/Ãveraskad3.MOV';\n \nlet tempPath = 0;\n\nclass PrevResult extends React.Component {\n    constructor(props){\n        super()\n        this.state = {tempStateValue : '', tempPath : ''}\n    }\n\n    startEmotion = () => {\n    }\n\n    // playEmotion = () => {\n    //   fetch('http://127.0.0.1:8000/control/MotionTrigger.data/0/0/1 ')\n    //       .then(response => response.json());\n    // }\n\n    //Based on the current state, currentState will be changed\n    //also introduce a timeout before moving to the next path/state\n    componentDidMount(){\n        // this.state.tempStateValue = this.props.currentState;\n        // console.log(this.props.history);\n        // curr = this.props.currentState;\n\n        // // this.timeoutHandle = setTimeout(()=>{\n        //     if (this.state.tempStateValue == 0){\n        //         this.state.tempPath = '/ExpPupilSize';\n        //         this.props.callbackFromParent(1);\n        //     }else if (this.state.tempStateValue == 1){\n        //         this.state.tempPath = '/ExpPupilOrientation'\n        //         this.props.callbackFromParent(2);\n        //     }else if (this.state.tempStateValue == 2){\n        //         this.state.tempPath = '/Result'\n        //         this.props.callbackFromParent(3);\n        //     }else{\n        //         this.state.tempPath = 0\n        //     }\n            // this.setState({ })}, 12000);\n            // this.setState({ })}, 20000);\n            console.log(this.props.currentEmotion);\n        }\n\n        getRecording = () =>{\n        //   let faceRecEmotions = this.props.faceRecEmotions;\n\n        //   const max = Object.keys(faceRecEmotions).reduce((a, b) => faceRecEmotions[a] > faceRecEmotions[b] ? a : b);\n\n        //   const currRec = objectList.find(x => x.faceRecEmotion === max).resultImages[this.props.currentState].emVidSrc;\n        //   console.log()\n\n        //   console.log(currRec);\n          return this.props.currentEmotion.resultImages[0].emVidSrc;\n        }\n            \n    //Transition to the next path/state\n    // componentWillUnmount(){\n    //     if (this.state.tempPath != 0){\n    //         this.props.history.push(this.state.tempPath);\n    //     }\n    //     clearTimeout(this.timeoutHandle);\n    // }\n\n    videoEnded = () => {\n        // tempPath = '/Result'\n        tempPath = '/ExpEyeColor';\n        this.props.callbackFromParent(3);\n\n\n        console.log('Video Ended');\n        console.log(this.props.currentState);\n        console.log(tempPath);\n\n        if (tempPath != 0)\n            this.props.history.push(tempPath);\n    }\n\n    render() {\n      return (\n          <div>\n              <video onEnded={this.videoEnded} src={this.getRecording()} width=\"1224\" height=\"768\" controls autoPlay type=\"video/mp4\"></video>\n          </div>\n      );\n    }\n}\n\nexport default PrevResult;","C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\ExpSelectApproach.js",["138"],"C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\progress-bar.component.js",[],"C:\\Users\\Angantyr\\Desktop\\Projects\\React\\EpiUI\\epiguess\\src\\Summary.js",["139","140"],{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":4,"column":8,"nodeType":"147","messageId":"148","endLine":4,"endColumn":19},{"ruleId":"145","severity":1,"message":"149","line":9,"column":8,"nodeType":"147","messageId":"148","endLine":9,"endColumn":20},{"ruleId":"145","severity":1,"message":"150","line":10,"column":8,"nodeType":"147","messageId":"148","endLine":10,"endColumn":27},{"ruleId":"145","severity":1,"message":"151","line":44,"column":11,"nodeType":"147","messageId":"148","endLine":44,"endColumn":18},{"ruleId":"145","severity":1,"message":"151","line":68,"column":11,"nodeType":"147","messageId":"148","endLine":68,"endColumn":18},{"ruleId":"145","severity":1,"message":"151","line":123,"column":11,"nodeType":"147","messageId":"148","endLine":123,"endColumn":18},{"ruleId":"152","severity":1,"message":"153","line":134,"column":31,"nodeType":"154","messageId":"155","endLine":134,"endColumn":33},{"ruleId":"152","severity":1,"message":"153","line":135,"column":35,"nodeType":"154","messageId":"155","endLine":135,"endColumn":37},{"ruleId":"156","severity":1,"message":"157","line":147,"column":33,"nodeType":"158","messageId":"159","endLine":147,"endColumn":35},{"ruleId":"145","severity":1,"message":"160","line":225,"column":9,"nodeType":"147","messageId":"148","endLine":225,"endColumn":12},{"ruleId":"156","severity":1,"message":"157","line":8,"column":23,"nodeType":"158","messageId":"159","endLine":8,"endColumn":25},{"ruleId":"156","severity":1,"message":"157","line":11,"column":29,"nodeType":"158","messageId":"159","endLine":11,"endColumn":31},{"ruleId":"156","severity":1,"message":"157","line":14,"column":29,"nodeType":"158","messageId":"159","endLine":14,"endColumn":31},{"ruleId":"145","severity":1,"message":"161","line":3,"column":8,"nodeType":"147","messageId":"148","endLine":3,"endColumn":18},{"ruleId":"145","severity":1,"message":"162","line":4,"column":10,"nodeType":"147","messageId":"148","endLine":4,"endColumn":24},{"ruleId":"145","severity":1,"message":"163","line":4,"column":26,"nodeType":"147","messageId":"148","endLine":4,"endColumn":33},{"ruleId":"145","severity":1,"message":"164","line":4,"column":43,"nodeType":"147","messageId":"148","endLine":4,"endColumn":52},{"ruleId":"145","severity":1,"message":"165","line":4,"column":54,"nodeType":"147","messageId":"148","endLine":4,"endColumn":57},{"ruleId":"145","severity":1,"message":"166","line":4,"column":59,"nodeType":"147","messageId":"148","endLine":4,"endColumn":62},{"ruleId":"156","severity":1,"message":"167","line":21,"column":26,"nodeType":"158","messageId":"159","endLine":21,"endColumn":28},{"ruleId":"152","severity":1,"message":"153","line":42,"column":35,"nodeType":"154","messageId":"155","endLine":42,"endColumn":37},{"ruleId":"152","severity":1,"message":"153","line":43,"column":39,"nodeType":"154","messageId":"155","endLine":43,"endColumn":41},{"ruleId":"152","severity":1,"message":"153","line":46,"column":50,"nodeType":"154","messageId":"155","endLine":46,"endColumn":52},{"ruleId":"156","severity":1,"message":"157","line":47,"column":51,"nodeType":"158","messageId":"159","endLine":47,"endColumn":53},{"ruleId":"145","severity":1,"message":"161","line":3,"column":8,"nodeType":"147","messageId":"148","endLine":3,"endColumn":18},{"ruleId":"152","severity":1,"message":"153","line":21,"column":35,"nodeType":"154","messageId":"155","endLine":21,"endColumn":37},{"ruleId":"152","severity":1,"message":"153","line":22,"column":39,"nodeType":"154","messageId":"155","endLine":22,"endColumn":41},{"ruleId":"152","severity":1,"message":"153","line":25,"column":50,"nodeType":"154","messageId":"155","endLine":25,"endColumn":52},{"ruleId":"156","severity":1,"message":"157","line":26,"column":51,"nodeType":"158","messageId":"159","endLine":26,"endColumn":53},{"ruleId":"168","severity":1,"message":"169","line":164,"column":37,"nodeType":"170","endLine":164,"endColumn":65},{"ruleId":"171","severity":1,"message":"172","line":116,"column":1,"nodeType":"173","endLine":118,"endColumn":2},{"ruleId":"145","severity":1,"message":"161","line":3,"column":8,"nodeType":"147","messageId":"148","endLine":3,"endColumn":18},{"ruleId":"152","severity":1,"message":"153","line":21,"column":35,"nodeType":"154","messageId":"155","endLine":21,"endColumn":37},{"ruleId":"152","severity":1,"message":"153","line":22,"column":39,"nodeType":"154","messageId":"155","endLine":22,"endColumn":41},{"ruleId":"152","severity":1,"message":"153","line":25,"column":50,"nodeType":"154","messageId":"155","endLine":25,"endColumn":52},{"ruleId":"156","severity":1,"message":"157","line":26,"column":51,"nodeType":"158","messageId":"159","endLine":26,"endColumn":53},{"ruleId":"145","severity":1,"message":"174","line":2,"column":8,"nodeType":"147","messageId":"148","endLine":2,"endColumn":19},{"ruleId":"145","severity":1,"message":"175","line":3,"column":9,"nodeType":"147","messageId":"148","endLine":3,"endColumn":19},{"ruleId":"145","severity":1,"message":"176","line":13,"column":9,"nodeType":"147","messageId":"148","endLine":13,"endColumn":19},{"ruleId":"145","severity":1,"message":"177","line":17,"column":9,"nodeType":"147","messageId":"148","endLine":17,"endColumn":23},{"ruleId":"145","severity":1,"message":"178","line":21,"column":7,"nodeType":"147","messageId":"148","endLine":21,"endColumn":23},{"ruleId":"145","severity":1,"message":"179","line":25,"column":7,"nodeType":"147","messageId":"148","endLine":25,"endColumn":20},{"ruleId":"145","severity":1,"message":"180","line":29,"column":7,"nodeType":"147","messageId":"148","endLine":29,"endColumn":25},{"ruleId":"145","severity":1,"message":"181","line":35,"column":7,"nodeType":"147","messageId":"148","endLine":35,"endColumn":18},{"ruleId":"145","severity":1,"message":"182","line":52,"column":7,"nodeType":"147","messageId":"148","endLine":52,"endColumn":12},{"ruleId":"168","severity":1,"message":"169","line":120,"column":25,"nodeType":"170","endLine":120,"endColumn":103},{"ruleId":"145","severity":1,"message":"183","line":132,"column":21,"nodeType":"147","messageId":"148","endLine":132,"endColumn":24},{"ruleId":"145","severity":1,"message":"184","line":23,"column":7,"nodeType":"147","messageId":"148","endLine":23,"endColumn":20},{"ruleId":"145","severity":1,"message":"185","line":27,"column":7,"nodeType":"147","messageId":"148","endLine":27,"endColumn":14},{"ruleId":"168","severity":1,"message":"169","line":137,"column":25,"nodeType":"170","endLine":137,"endColumn":96},{"ruleId":"156","severity":1,"message":"167","line":141,"column":55,"nodeType":"158","messageId":"159","endLine":141,"endColumn":57},{"ruleId":"145","severity":1,"message":"175","line":3,"column":9,"nodeType":"147","messageId":"148","endLine":3,"endColumn":19},{"ruleId":"145","severity":1,"message":"186","line":4,"column":8,"nodeType":"147","messageId":"148","endLine":4,"endColumn":11},{"ruleId":"156","severity":1,"message":"167","line":77,"column":22,"nodeType":"158","messageId":"159","endLine":77,"endColumn":24},{"ruleId":"145","severity":1,"message":"187","line":3,"column":20,"nodeType":"147","messageId":"148","endLine":3,"endColumn":28},{"ruleId":"168","severity":1,"message":"169","line":56,"column":29,"nodeType":"170","endLine":56,"endColumn":88},{"ruleId":"168","severity":1,"message":"169","line":58,"column":29,"nodeType":"170","endLine":58,"endColumn":105},"no-native-reassign",["188"],"no-negated-in-lhs",["189"],"no-unused-vars","'robot_image' is defined but never used.","Identifier","unusedVar","'ExpPupilSize' is defined but never used.","'ExpPupilOrientation' is defined but never used.","'mapRows' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'val' is assigned a value but never used.","'profilePic' is defined but never used.","'OverlayTrigger' is defined but never used.","'Tooltip' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","Expected '!==' and instead saw '!='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'ProgressBar' is defined but never used.","'objectList' is defined but never used.","'imageStyle' is assigned a value but never used.","'divInlineBlock' is assigned a value but never used.","'epiResultWrapper' is assigned a value but never used.","'epiEmotionBar' is assigned a value but never used.","'resultImageWrapper' is assigned a value but never used.","'resultImage' is assigned a value but never used.","'score' is assigned a value but never used.","'key' is assigned a value but never used.","'loaderWrapper' is assigned a value but never used.","'spinner' is assigned a value but never used.","'vid' is defined but never used.","'faCoffee' is defined but never used.","no-global-assign","no-unsafe-negation"]